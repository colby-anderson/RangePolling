{
  "address": "0x138CE40d675F9a23E4D6127A8600308Cf7A93381",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inchToken",
          "type": "address"
        },
        {
          "internalType": "contract IMooniswapFactory",
          "name": "_mooniswapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "claimCurrentEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "claimFrozenEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        }
      ],
      "name": "freezeEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inchToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapFactory",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pathWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstUnprocessedEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "updatePathWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8352fc01b11bf2006594ce535f48d1ebacebfa8b478ad2c5d9dee584a5cc1ca5",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x138CE40d675F9a23E4D6127A8600308Cf7A93381",
    "transactionIndex": 9,
    "gasUsed": "3089638",
    "logsBloom": "0x
    "blockHash": "0x829314536eee43ed09ea5522155aac5adbd3498536991f42a7da09e4cba40dd3",
    "transactionHash": "0x8352fc01b11bf2006594ce535f48d1ebacebfa8b478ad2c5d9dee584a5cc1ca5",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 24096479,
        "transactionHash": "0x8352fc01b11bf2006594ce535f48d1ebacebfa8b478ad2c5d9dee584a5cc1ca5",
        "address": "0x138CE40d675F9a23E4D6127A8600308Cf7A93381",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x829314536eee43ed09ea5522155aac5adbd3498536991f42a7da09e4cba40dd3"
      }
    ],
    "blockNumber": 24096479,
    "cumulativeGasUsed": "5130971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x54431918cEC22932fCF97E54769F4E00f646690F",
    "0x735247fb0a604c0adC6cab38ACE16D0DbA31295F"
  ],
  "solcInputHash": "4dd535321b80fd9ff34a7b95c5024f19",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inchToken\",\"type\":\"address\"},{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"_mooniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"claimCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"claimFrozenEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"}],\"name\":\"freezeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inchToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapFactory\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pathWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstUnprocessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"updatePathWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferralFeeReceiver.sol\":\"ReferralFeeReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/UniERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using UniERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct SwapVolumes {\\n        uint128 confirmed;\\n        uint128 result;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n    mapping(IERC20 => SwapVolumes) public volumes;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    )\\n        public\\n        ERC20(name, symbol)\\n        MooniswapGovernance(_mooniswapFactoryGovernance)\\n    {\\n        require(bytes(name).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(_token0 != _token1, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.uniBalanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(decayPeriod(), balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.uniBalanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(decayPeriod(), balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external payable returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public payable nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n        require(msg.value == (_tokens[0].isETH() ? maxAmounts[0] : (_tokens[1].isETH() ? maxAmounts[1] : 0)), \\\"Mooniswap: wrong value usage\\\");\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].uniTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].uniBalanceOf(address(this)).sub(_tokens[i].isETH() ? msg.value : 0);\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].uniTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].uniBalanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 _decayPeriod = decayPeriod();  // gas savings\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        uint256 _decayPeriod = decayPeriod();  // gas savings\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.uniBalanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.uniTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(_decayPeriod, preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(_decayPeriod, preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver) public payable nonReentrant whenNotShutdown returns(uint256 result) {\\n        require(msg.value == (src.isETH() ? amount : 0), \\\"Mooniswap: wrong value usage\\\");\\n\\n        Balances memory balances = Balances({\\n            src: src.uniBalanceOf(address(this)).sub(src.isETH() ? msg.value : 0),\\n            dst: dst.uniBalanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n\\n        // Overflow of uint128 is desired\\n        volumes[src].confirmed += uint128(confirmed);\\n        volumes[src].result += uint128(result);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address payable receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        uint256 _decayPeriod = decayPeriod();\\n        virtualBalances.src = virtualBalancesForAddition[src].current(_decayPeriod, balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(_decayPeriod, balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.uniTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.uniBalanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.uniTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(_decayPeriod, balances.src);\\n        virtualBalancesForAddition[dst].update(_decayPeriod, balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external nonReentrant onlyOwner {\\n        uint256 balance0 = token0.uniBalanceOf(address(this));\\n        uint256 balance1 = token1.uniBalanceOf(address(this));\\n\\n        token.uniTransfer(msg.sender, amount);\\n\\n        require(token0.uniBalanceOf(address(this)) >= balance0, \\\"Mooniswap: access denied\\\");\\n        require(token1.uniBalanceOf(address(this)) >= balance1, \\\"Mooniswap: access denied\\\");\\n        require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"Mooniswap: access denied\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf4dfdd316f05e3a1519432a0fb8a4189674eb41928e979fd70189f8337262cc2\",\"license\":\"MIT\"},\"contracts/ReferralFeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/UniERC20.sol\\\";\\nimport \\\"./utils/Converter.sol\\\";\\n\\n\\ncontract ReferralFeeReceiver is IFeeCollector, Converter, ReentrancyGuard {\\n    using UniERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 balance;\\n        mapping(IERC20 => mapping(uint256 => uint256)) share;\\n        mapping(IERC20 => uint256) firstUnprocessedEpoch;\\n    }\\n\\n    struct EpochBalance {\\n        uint256 totalSupply;\\n        uint256 token0Balance;\\n        uint256 token1Balance;\\n        uint256 inchBalance;\\n    }\\n\\n    struct TokenInfo {\\n        mapping(uint256 => EpochBalance) epochBalance;\\n        uint256 firstUnprocessedEpoch;\\n        uint256 currentEpoch;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(IERC20 => TokenInfo) public tokenInfo;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(IERC20 _inchToken, IMooniswapFactory _mooniswapFactory) public Converter(_inchToken, _mooniswapFactory) {}\\n\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external override {\\n        for (uint i = 0; i < receivers.length; i++) {\\n            updateReward(receivers[i], amounts[i]);\\n        }\\n    }\\n\\n    function updateReward(address referral, uint256 amount) public override {\\n        Mooniswap mooniswap = Mooniswap(msg.sender);\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[referral];\\n        uint256 currentEpoch = token.currentEpoch;\\n\\n        // Add new reward to current epoch\\n        user.share[mooniswap][currentEpoch] = user.share[mooniswap][currentEpoch].add(amount);\\n        token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.add(amount);\\n\\n        // Collect all processed epochs and advance user token epoch\\n        _collectProcessedEpochs(user, token, mooniswap, currentEpoch);\\n    }\\n\\n    function freezeEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) validSpread(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        uint256 currentEpoch = token.currentEpoch;\\n        require(token.firstUnprocessedEpoch == currentEpoch, \\\"Previous epoch is not finalized\\\");\\n\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256 token0Balance = tokens[0].uniBalanceOf(address(this));\\n        uint256 token1Balance = tokens[1].uniBalanceOf(address(this));\\n        mooniswap.withdraw(mooniswap.balanceOf(address(this)), new uint256[](0));\\n        token.epochBalance[currentEpoch].token0Balance = tokens[0].uniBalanceOf(address(this)).sub(token0Balance);\\n        token.epochBalance[currentEpoch].token1Balance = tokens[1].uniBalanceOf(address(this)).sub(token1Balance);\\n        token.currentEpoch = currentEpoch.add(1);\\n    }\\n\\n    function trade(Mooniswap mooniswap, IERC20[] memory path) external nonReentrant validPool(mooniswap) validPath(path) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\n        EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\n        require(firstUnprocessedEpoch.add(1) == token.currentEpoch, \\\"Prev epoch already finalized\\\");\\n\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256 availableBalance;\\n        if (path[0] == tokens[0]) {\\n            availableBalance = epochBalance.token0Balance;\\n        } else if (path[0] == tokens[1]) {\\n            availableBalance = epochBalance.token1Balance;\\n        } else {\\n            revert(\\\"Invalid first token\\\");\\n        }\\n\\n        (uint256 amount, uint256 returnAmount) = _maxAmountForSwap(path, availableBalance);\\n        if (returnAmount == 0) {\\n            // get rid of dust\\n            if (availableBalance > 0) {\\n                require(availableBalance == amount, \\\"availableBalance is not dust\\\");\\n                for (uint256 i = 0; i + 1 < path.length; i += 1) {\\n                    Mooniswap _mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n                    require(_validateSpread(_mooniswap), \\\"Spread is too high\\\");\\n                }\\n                if (path[0].isETH()) {\\n                    tx.origin.transfer(availableBalance);  // solhint-disable-line avoid-tx-origin\\n                } else {\\n                    path[0].safeTransfer(address(mooniswap), availableBalance);\\n                }\\n            }\\n        } else {\\n            uint256 receivedAmount = _swap(path, amount, payable(address(this)));\\n            epochBalance.inchBalance = epochBalance.inchBalance.add(receivedAmount);\\n        }\\n\\n        if (path[0] == tokens[0]) {\\n            epochBalance.token0Balance = epochBalance.token0Balance.sub(amount);\\n        } else {\\n            epochBalance.token1Balance = epochBalance.token1Balance.sub(amount);\\n        }\\n\\n        if (epochBalance.token0Balance == 0 && epochBalance.token1Balance == 0) {\\n            token.firstUnprocessedEpoch = firstUnprocessedEpoch.add(1);\\n        }\\n    }\\n\\n    function claim(Mooniswap[] memory pools) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        for (uint256 i = 0; i < pools.length; ++i) {\\n            Mooniswap mooniswap = pools[i];\\n            TokenInfo storage token = tokenInfo[mooniswap];\\n            _collectProcessedEpochs(user, token, mooniswap, token.currentEpoch);\\n        }\\n\\n        uint256 balance = user.balance;\\n        if (balance > 1) {\\n            // Avoid erasing storage to decrease gas footprint for referral payments\\n            user.balance = 1;\\n            inchToken.transfer(msg.sender, balance - 1);\\n        }\\n    }\\n\\n    function claimCurrentEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 currentEpoch = token.currentEpoch;\\n        uint256 balance = user.share[mooniswap][currentEpoch];\\n        if (balance > 0) {\\n            user.share[mooniswap][currentEpoch] = 0;\\n            token.epochBalance[currentEpoch].totalSupply = token.epochBalance[currentEpoch].totalSupply.sub(balance);\\n            mooniswap.transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    function claimFrozenEpoch(Mooniswap mooniswap) external nonReentrant validPool(mooniswap) {\\n        TokenInfo storage token = tokenInfo[mooniswap];\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 firstUnprocessedEpoch = token.firstUnprocessedEpoch;\\n        uint256 currentEpoch = token.currentEpoch;\\n\\n        require(firstUnprocessedEpoch.add(1) == currentEpoch, \\\"Epoch already finalized\\\");\\n        require(user.firstUnprocessedEpoch[mooniswap] == firstUnprocessedEpoch, \\\"Epoch funds already claimed\\\");\\n\\n        user.firstUnprocessedEpoch[mooniswap] = currentEpoch;\\n        uint256 share = user.share[mooniswap][firstUnprocessedEpoch];\\n\\n        if (share > 0) {\\n            EpochBalance storage epochBalance = token.epochBalance[firstUnprocessedEpoch];\\n            uint256 totalSupply = epochBalance.totalSupply;\\n            user.share[mooniswap][firstUnprocessedEpoch] = 0;\\n            epochBalance.totalSupply = totalSupply.sub(share);\\n\\n            IERC20[] memory tokens = mooniswap.getTokens();\\n            epochBalance.token0Balance = _transferTokenShare(tokens[0], epochBalance.token0Balance, share, totalSupply);\\n            epochBalance.token1Balance = _transferTokenShare(tokens[1], epochBalance.token1Balance, share, totalSupply);\\n            epochBalance.inchBalance = _transferTokenShare(inchToken, epochBalance.inchBalance, share, totalSupply);\\n        }\\n    }\\n\\n    function _transferTokenShare(IERC20 token, uint256 balance, uint256 share, uint256 totalSupply) private returns(uint256 newBalance) {\\n        uint256 amount = balance.mul(share).div(totalSupply);\\n        if (amount > 0) {\\n            token.uniTransfer(msg.sender, amount);\\n        }\\n        return balance.sub(amount);\\n    }\\n\\n    function _collectProcessedEpochs(UserInfo storage user, TokenInfo storage token, Mooniswap mooniswap, uint256 currentEpoch) private {\\n        // Early return for the new users\\n        if (user.share[mooniswap][user.firstUnprocessedEpoch[mooniswap]] == 0) {\\n            user.firstUnprocessedEpoch[mooniswap] = currentEpoch;\\n            return;\\n        }\\n\\n        uint256 userEpoch = user.firstUnprocessedEpoch[mooniswap];\\n        uint256 tokenEpoch = token.firstUnprocessedEpoch;\\n        uint256 epochCount = Math.min(2, tokenEpoch.sub(userEpoch)); // 0, 1 or 2 epochs\\n        if (epochCount == 0) {\\n            return;\\n        }\\n\\n        // Claim 1 or 2 processed epochs for the user\\n        uint256 collected = _collectEpoch(user, token, mooniswap, userEpoch);\\n        if (epochCount > 1) {\\n            collected = collected.add(_collectEpoch(user, token, mooniswap, userEpoch + 1));\\n        }\\n        user.balance = user.balance.add(collected);\\n\\n        // Update user token epoch counter\\n        bool emptySecondEpoch = user.share[mooniswap][userEpoch + 1] == 0;\\n        user.firstUnprocessedEpoch[mooniswap] = (epochCount == 2 || emptySecondEpoch) ? currentEpoch : userEpoch + 1;\\n    }\\n\\n    function _collectEpoch(UserInfo storage user, TokenInfo storage token, Mooniswap mooniswap, uint256 epoch) private returns(uint256 collected) {\\n        uint256 share = user.share[mooniswap][epoch];\\n        if (share > 0) {\\n            uint256 inchBalance = token.epochBalance[epoch].inchBalance;\\n            uint256 totalSupply = token.epochBalance[epoch].totalSupply;\\n\\n            collected = inchBalance.mul(share).div(totalSupply);\\n\\n            user.share[mooniswap][epoch] = 0;\\n            token.epochBalance[epoch].totalSupply = totalSupply.sub(share);\\n            token.epochBalance[epoch].inchBalance = inchBalance.sub(collected);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x70f5733e3adbbec355657b0247641dd5b83e9bdc4b78f8c0c751c8469d351225\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n    event DecayPeriodVoteUpdate(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n    LiquidVoting.Data private _decayPeriod;\\n\\n    constructor(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n        _decayPeriod.data.result = _mooniswapFactoryGovernance.defaultDecayPeriod().toUint104();\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n        this.discardDecayPeriodVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function decayPeriod() public view returns(uint256) {\\n        return _decayPeriod.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function virtualDecayPeriod() external view returns(uint104, uint104, uint48) {\\n        return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function decayPeriodVotes(address user) external view returns(uint256) {\\n        return _decayPeriod.votes[user].get(mooniswapFactoryGovernance.defaultDecayPeriod);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function decayPeriodVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_DECAY_PERIOD, \\\"Decay period vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_DECAY_PERIOD, \\\"Decay period vote is too low\\\");\\n\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardDecayPeriodVote() external {\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _emitDecayPeriodVoteUpdate(address account, uint256 newDecayPeriod, bool isDefault, uint256 newBalance) private {\\n        emit DecayPeriodVoteUpdate(account, newDecayPeriod, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n        _updateOnTransfer(params, defaultDecayPeriod, _emitDecayPeriodVoteUpdate, _decayPeriod);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62430fc9ad87ad51c5820482201ad5f6df47c838e8b9e50a5207eb9dbe7cc12e\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapFactory is IMooniswapFactoryGovernance {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (Mooniswap);\\n    function isPool(Mooniswap mooniswap) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee7b8aa36fc3d066d8c1413b06f09932eb72e9d608f5ce8b303a9cafc049fcab\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n    function defaultDecayPeriod() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultDecayPeriod() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x86fd2d21dcd3c4b28d17a65f6eba549c252e5b14a22d447c4ff5c8006a3c63e8\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n\\nlibrary UniERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(0));\\n    }\\n\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                to.transfer(amount);\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    function uniTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                require(msg.value >= amount, \\\"UniERC20: not enough value\\\");\\n                require(from == msg.sender, \\\"from is not msg.sender\\\");\\n                require(to == address(this), \\\"to is not this\\\");\\n                if (msg.value > amount) {\\n                    // Return remainder if exist\\n                    from.transfer(msg.value.sub(amount));\\n                }\\n            } else {\\n                token.safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    function uniSymbol(IERC20 token) internal view returns(string memory) {\\n        if (isETH(token)) {\\n            return \\\"ETH\\\";\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\\n            abi.encodeWithSignature(\\\"symbol()\\\")\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{ gas: 20000 }(\\n                abi.encodeWithSignature(\\\"SYMBOL()\\\")\\n            );\\n        }\\n\\n        if (success && data.length >= 96) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            if (offset == 0x20 && len > 0 && len <= 256) {\\n                return string(abi.decode(data, (bytes)));\\n            }\\n        }\\n\\n        if (success && data.length == 32) {\\n            uint len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                len++;\\n            }\\n\\n            if (len > 0) {\\n                bytes memory result = new bytes(len);\\n                for (uint i = 0; i < len; i++) {\\n                    result[i] = data[i];\\n                }\\n                return string(result);\\n            }\\n        }\\n\\n        return _toHex(address(token));\\n    }\\n\\n    function _toHex(address account) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(account));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        uint j = 2;\\n        for (uint i = 0; i < data.length; i++) {\\n            uint a = uint8(data[i]) >> 4;\\n            uint b = uint8(data[i]) & 0x0f;\\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\\n        }\\n\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x0edbb831cddd42ae71b178230188bd12c8f1cd362b148df704df6f0b1c9e015f\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\n        set(self, current(self, decayPeriod, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\n        uint256 timeRemain = decayPeriod.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(decayPeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x0493d4b88ca464df713e7978a995c26f378e458ffeffc4a0ca966510e4cea8cb\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/utils/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"../libraries/UniERC20.sol\\\";\\nimport \\\"../libraries/VirtualBalance.sol\\\";\\nimport \\\"../Mooniswap.sol\\\";\\n\\n\\ncontract Converter is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using UniERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    uint256 private constant _ONE = 1e18;\\n    uint256 private constant _MAX_SPREAD = 0.01e18;\\n    uint256 private constant _MAX_LIQUIDITY_SHARE = 100;\\n\\n    IERC20 public immutable inchToken;\\n    IMooniswapFactory public immutable mooniswapFactory;\\n    mapping(IERC20 => bool) public pathWhitelist;\\n\\n    constructor (IERC20 _inchToken, IMooniswapFactory _mooniswapFactory) public {\\n        inchToken = _inchToken;\\n        mooniswapFactory = _mooniswapFactory;\\n    }\\n\\n    receive() external payable {\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender != tx.origin, \\\"ETH transfer forbidden\\\");\\n    }\\n\\n    modifier validSpread(Mooniswap mooniswap) {\\n        require(_validateSpread(mooniswap), \\\"Spread is too high\\\");\\n\\n        _;\\n    }\\n\\n    modifier validPool(Mooniswap mooniswap) {\\n        require(mooniswapFactory.isPool(mooniswap), \\\"Invalid mooniswap\\\");\\n\\n        _;\\n    }\\n\\n    modifier validPath(IERC20[] memory path) {\\n        require(path.length > 0, \\\"Min path length is 1\\\");\\n        require(path.length < 5, \\\"Max path length is 4\\\");\\n        require(path[path.length - 1] == inchToken, \\\"Should swap to target token\\\");\\n\\n        for (uint256 i = 1; i + 1 < path.length; i += 1) {\\n            require(pathWhitelist[path[i]], \\\"Token is not whitelisted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    function updatePathWhitelist(IERC20 token, bool whitelisted) external onlyOwner {\\n        pathWhitelist[token] = whitelisted;\\n    }\\n\\n    function _validateSpread(Mooniswap mooniswap) internal view returns(bool) {\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n\\n        uint256 buyPrice;\\n        uint256 sellPrice;\\n        uint256 spotPrice;\\n        {\\n            uint256 token0Balance = tokens[0].uniBalanceOf(address(mooniswap));\\n            uint256 token1Balance = tokens[1].uniBalanceOf(address(mooniswap));\\n            uint256 decayPeriod = mooniswap.decayPeriod();\\n            VirtualBalance.Data memory vb;\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForAddition(tokens[0]);\\n            uint256 token0BalanceForAddition = Math.max(vb.current(decayPeriod, token0Balance), token0Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForAddition(tokens[1]);\\n            uint256 token1BalanceForAddition = Math.max(vb.current(decayPeriod, token1Balance), token1Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForRemoval(tokens[0]);\\n            uint256 token0BalanceForRemoval = Math.min(vb.current(decayPeriod, token0Balance), token0Balance);\\n            (vb.balance, vb.time) = mooniswap.virtualBalancesForRemoval(tokens[1]);\\n            uint256 token1BalanceForRemoval = Math.min(vb.current(decayPeriod, token1Balance), token1Balance);\\n\\n            buyPrice = _ONE.mul(token1BalanceForAddition).div(token0BalanceForRemoval);\\n            sellPrice = _ONE.mul(token1BalanceForRemoval).div(token0BalanceForAddition);\\n            spotPrice = _ONE.mul(token1Balance).div(token0Balance);\\n        }\\n\\n        return buyPrice.sub(sellPrice).mul(_ONE) < _MAX_SPREAD.mul(spotPrice);\\n    }\\n\\n    function _maxAmountForSwap(IERC20[] memory path, uint256 amount) internal view returns(uint256 srcAmount, uint256 dstAmount) {\\n        srcAmount = amount;\\n        dstAmount = amount;\\n        uint256 pathLength = path.length;\\n\\n        for (uint256 i = 0; i + 1 < pathLength; i += 1) {\\n            Mooniswap mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n            uint256 maxCurStepAmount = path[i].uniBalanceOf(address(mooniswap)).div(_MAX_LIQUIDITY_SHARE);\\n            if (maxCurStepAmount < dstAmount) {\\n                srcAmount = srcAmount.mul(maxCurStepAmount).div(dstAmount);\\n                dstAmount = maxCurStepAmount;\\n            }\\n            dstAmount = mooniswap.getReturn(path[i], path[i+1], dstAmount);\\n        }\\n    }\\n\\n    function _swap(IERC20[] memory path, uint256 initialAmount, address payable destination) internal returns(uint256 amount)\\n    {\\n        amount = initialAmount;\\n\\n        for (uint256 i = 0; i + 1 < path.length; i += 1) {\\n            Mooniswap mooniswap = mooniswapFactory.pools(path[i], path[i+1]);\\n\\n            require(_validateSpread(mooniswap), \\\"Spread is too high\\\");\\n\\n            uint256 value = amount;\\n            if (!path[i].isETH()) {\\n                path[i].safeApprove(address(mooniswap), amount);\\n                value = 0;\\n            }\\n\\n            if (i + 2 < path.length) {\\n                amount = mooniswap.swap{value: value}(path[i], path[i+1], amount, 0, address(0));\\n            }\\n            else {\\n                amount = mooniswap.swapFor{value: value}(path[i], path[i+1], amount, 0, address(0), destination);\\n            }\\n        }\\n\\n        if (path.length == 1) {\\n            path[0].transfer(destination, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x27d7e12a070ca56c87e31ebbbb4f2abf429d060b871931e824839d0a5c945595\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200375238038062003752833981810160405260408110156200003757600080fd5b508051602090910151818160006200004e620000be565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606092831b8116608052911b1660a05250506001600255620000c2565b3390565b60805160601c60a05160601c6136346200011e600039806109b05280610d8d5280610e3d528061135752806116eb5280611c92528061282b5280612a935250806107da5280610d4a5280611529528061185152506136346000f3fe6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063f2fde38b11610059578063f2fde38b146104a5578063f3aafa80146104d8578063f583adbc14610598578063f5dab711146105d357610153565b80638da5cb5b14610415578063946e1a621461042a5780639e96b2ce1461045d578063ec9545941461049057610153565b80635e8c8bb7116100c65780635e8c8bb714610355578063715018a61461039c57806371646f98146103b157806385731140146103e457610153565b80630931753c146101585780631959a002146102275780631a3991251461026c578063318d9e5d146102a557610153565b366101535733321415610151576040805162461bcd60e51b815260206004820152601660248201527f455448207472616e7366657220666f7262696464656e00000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561016457600080fd5b506101516004803603604081101561017b57600080fd5b81019060208101813564010000000081111561019657600080fd5b8201836020820111156101a857600080fd5b803590602001918460208302840111640100000000831117156101ca57600080fd5b9193909290916020810190356401000000008111156101e857600080fd5b8201836020820111156101fa57600080fd5b8035906020019184602083028401116401000000008311171561021c57600080fd5b50909250905061061f565b34801561023357600080fd5b5061025a6004803603602081101561024a57600080fd5b50356001600160a01b0316610670565b60408051918252519081900360200190f35b34801561027857600080fd5b506101516004803603604081101561028f57600080fd5b506001600160a01b038135169060200135610682565b3480156102b157600080fd5b50610151600480360360208110156102c857600080fd5b8101906020810181356401000000008111156102e357600080fd5b8201836020820111156102f557600080fd5b8035906020019184602083028401116401000000008311171561031757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061072b945050505050565b34801561036157600080fd5b506103886004803603602081101561037857600080fd5b50356001600160a01b0316610851565b604080519115158252519081900360200190f35b3480156103a857600080fd5b50610151610866565b3480156103bd57600080fd5b50610151600480360360208110156103d457600080fd5b50356001600160a01b0316610931565b3480156103f057600080fd5b506103f9610d8b565b604080516001600160a01b039092168252519081900360200190f35b34801561042157600080fd5b506103f9610daf565b34801561043657600080fd5b506101516004803603602081101561044d57600080fd5b50356001600160a01b0316610dbe565b34801561046957600080fd5b506101516004803603602081101561048057600080fd5b50356001600160a01b03166112d8565b34801561049c57600080fd5b506103f9611527565b3480156104b157600080fd5b50610151600480360360208110156104c857600080fd5b50356001600160a01b031661154b565b3480156104e457600080fd5b50610151600480360360408110156104fb57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561052657600080fd5b82018360208201111561053857600080fd5b8035906020019184602083028401116401000000008311171561055a57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061166c945050505050565b3480156105a457600080fd5b50610151600480360360408110156105bb57600080fd5b506001600160a01b0381351690602001351515611f25565b3480156105df57600080fd5b50610606600480360360208110156105f657600080fd5b50356001600160a01b0316611fc4565b6040805192835260208301919091528051918290030190f35b60005b838110156106695761066185858381811061063957fe5b905060200201356001600160a01b031684848481811061065557fe5b90506020020135610682565b600101610622565b5050505050565b60036020526000908152604090205481565b3360008181526004602090815260408083206001600160a01b038716845260038352818420600282015486865260018201855283862081875290945291909320549091906106d09086611fe0565b6001600160a01b0385166000908152600184016020908152604080832085845282528083209390935585905220546107089086611fe0565b60008281526020859052604090205561072382848684612043565b505050505050565b336000908152600360205260408120905b82518110156107a057600083828151811061075357fe5b60200260200101519050600060046000836001600160a01b03166001600160a01b0316815260200190815260200160002090506107968482848460020154612043565b505060010161073c565b508054600181111561084c57600182556040805163a9059cbb60e01b81523360048201526000198301602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561082257600080fd5b505af1158015610836573d6000803e3d6000fd5b505050506040513d602081101561066957600080fd5b505050565b60016020526000908152604090205460ff1681565b61086e61218e565b6001600160a01b031661087f610daf565b6001600160a01b0316146108da576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600280541415610988576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038084166004830152915183927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b1580156109f657600080fd5b505afa158015610a0a573d6000803e3d6000fd5b505050506040513d6020811015610a2057600080fd5b5051610a67576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b6001600160a01b03821660009081526004602090815260408083203384526003909252909120600180830154600284015490918190610aa7908490611fe0565b14610af9576040805162461bcd60e51b815260206004820152601760248201527f45706f636820616c72656164792066696e616c697a6564000000000000000000604482015290519081900360640190fd5b6001600160a01b03861660009081526002840160205260409020548214610b67576040805162461bcd60e51b815260206004820152601b60248201527f45706f63682066756e647320616c726561647920636c61696d65640000000000604482015290519081900360640190fd5b6001600160a01b038616600090815260028401602090815260408083208490556001860182528083208584529091529020548015610d7d5760008381526020868152604080832080546001600160a01b038c16855260018901845282852088865290935290832092909255610bdc8184612192565b82600001819055506060896001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c5c57600080fd5b8101908080516040519392919084640100000000821115610c7c57600080fd5b908301906020820185811115610c9157600080fd5b8251866020820283011164010000000082111715610cae57600080fd5b82525081516020918201928201910280838360005b83811015610cdb578181015183820152602001610cc3565b505050509050016040525050509050610d0e81600081518110610cfa57fe5b6020026020010151846001015486856121ef565b8360010181905550610d3a81600181518110610d2657fe5b6020026020010151846002015486856121ef565b60028401556003830154610d71907f00000000000000000000000000000000000000000000000000000000000000009086856121ef565b83600301819055505050505b505060016002555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b600280541415610e15576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038084166004830152915183927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b158015610e8357600080fd5b505afa158015610e97573d6000803e3d6000fd5b505050506040513d6020811015610ead57600080fd5b5051610ef4576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b81610efe81612236565b610f44576040805162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b604482015290519081900360640190fd5b6001600160a01b0383166000908152600460205260409020600281015460018201548114610fb9576040805162461bcd60e51b815260206004820152601f60248201527f50726576696f75732065706f6368206973206e6f742066696e616c697a656400604482015290519081900360640190fd5b6060856001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610ff457600080fd5b505afa158015611008573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561103157600080fd5b810190808051604051939291908464010000000082111561105157600080fd5b90830190602082018581111561106657600080fd5b825186602082028301116401000000008211171561108357600080fd5b82525081516020918201928201910280838360005b838110156110b0578181015183820152602001611098565b50505050905001604052505050905060006110f130836000815181106110d257fe5b60200260200101516001600160a01b031661277290919063ffffffff16565b9050600061110630846001815181106110d257fe5b9050876001600160a01b0316635915d806896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561116457600080fd5b505afa158015611178573d6000803e3d6000fd5b505050506040513d602081101561118e57600080fd5b50516040805160008082526020820190925290506040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156111f75781810151838201526020016111df565b5050505090500193505050506040805180830381600087803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561125557600080fd5b5050825161127690839061127090309087906000906110d257fe5b90612192565b856000016000868152602001908152602001600020600101819055506112a78161127030866001815181106110d257fe5b6000858152602087905260409020600201556112c4846001611fe0565b600295860155505060019092555050505050565b60028054141561132f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038084166004830152915183927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d60208110156113c757600080fd5b505161140e576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b6001600160a01b038216600081815260046020908152604080832033845260038352818420600282015495855260018101845282852086865290935292205491929091801561151a576001600160a01b038616600090815260018401602090815260408083208584528252808320839055908690529020546114909082612192565b60008381526020868152604080832093909355825163a9059cbb60e01b81523360048201526024810185905292516001600160a01b038a169363a9059cbb9360448083019493928390030190829087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b50505b5050600160025550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61155361218e565b6001600160a01b0316611564610daf565b6001600160a01b0316146115bf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166116045760405162461bcd60e51b81526004018080602001828103825260268152602001806135326026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002805414156116c3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038085166004830152915184927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b15801561173157600080fd5b505afa158015611745573d6000803e3d6000fd5b505050506040513d602081101561175b57600080fd5b50516117a2576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b8160008151116117f9576040805162461bcd60e51b815260206004820152601460248201527f4d696e2070617468206c656e6774682069732031000000000000000000000000604482015290519081900360640190fd5b600581511061184f576040805162461bcd60e51b815260206004820152601460248201527f4d61782070617468206c656e6774682069732034000000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168160018351038151811061188957fe5b60200260200101516001600160a01b0316146118ec576040805162461bcd60e51b815260206004820152601b60248201527f53686f756c64207377617020746f2074617267657420746f6b656e0000000000604482015290519081900360640190fd5b60015b815181600101101561198b576001600083838151811061190b57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16611983576040805162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f742077686974656c69737465640000000000000000604482015290519081900360640190fd5b6001016118ef565b506001600160a01b03841660009081526004602090815260408083206001808201548086529382905291909320600284015490916119ca908490611fe0565b14611a1c576040805162461bcd60e51b815260206004820152601c60248201527f507265762065706f636820616c72656164792066696e616c697a656400000000604482015290519081900360640190fd5b6060876001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015611a5757600080fd5b505afa158015611a6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611a9457600080fd5b8101908080516040519392919084640100000000821115611ab457600080fd5b908301906020820185811115611ac957600080fd5b8251866020820283011164010000000082111715611ae657600080fd5b82525081516020918201928201910280838360005b83811015611b13578181015183820152602001611afb565b505050509050016040525050509050600081600081518110611b3157fe5b60200260200101516001600160a01b031688600081518110611b4f57fe5b60200260200101516001600160a01b03161415611b7157506001820154611c0b565b81600181518110611b7e57fe5b60200260200101516001600160a01b031688600081518110611b9c57fe5b60200260200101516001600160a01b03161415611bbe57506002820154611c0b565b6040805162461bcd60e51b815260206004820152601360248201527f496e76616c696420666972737420746f6b656e00000000000000000000000000604482015290519081900360640190fd5b600080611c188a84612813565b915091508060001415611e53578215611e4e57818314611c7f576040805162461bcd60e51b815260206004820152601c60248201527f617661696c61626c6542616c616e6365206973206e6f74206475737400000000604482015290519081900360640190fd5b60005b8a51816001011015611dbd5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78d8481518110611ccb57fe5b60200260200101518e8560010181518110611ce257fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015611d3757600080fd5b505afa158015611d4b573d6000803e3d6000fd5b505050506040513d6020811015611d6157600080fd5b50519050611d6e81612236565b611db4576040805162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b604482015290519081900360640190fd5b50600101611c82565b50611de48a600081518110611dce57fe5b60200260200101516001600160a01b0316612a0b565b15611e1c57604051329084156108fc029085906000818181858888f19350505050158015611e16573d6000803e3d6000fd5b50611e4e565b611e4e8b848c600081518110611e2e57fe5b60200260200101516001600160a01b0316612a189092919063ffffffff16565b611e79565b6000611e608b8430612a7f565b6003870154909150611e729082611fe0565b6003870155505b83600081518110611e8657fe5b60200260200101516001600160a01b03168a600081518110611ea457fe5b60200260200101516001600160a01b03161415611ed4576001850154611eca9083612192565b6001860155611ee9565b6002850154611ee39083612192565b60028601555b6001850154158015611efd57506002850154155b15611f1357611f0d866001611fe0565b60018801555b50506001600255505050505050505050565b611f2d61218e565b6001600160a01b0316611f3e610daf565b6001600160a01b031614611f99576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6004602052600090815260409020600181015460029091015482565b60008282018381101561203a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6001600160a01b03821660009081526001850160209081526040808320600288018352818420548452909152902054612098576001600160a01b03821660009081526002850160205260409020819055612188565b6001600160a01b0382166000908152600280860160205260408220546001860154909290916120d0906120cb8486612192565b612e8f565b9050806120df57505050612188565b60006120ed88888887612ea5565b905060018211156121145761211161210a89898988600101612ea5565b8290611fe0565b90505b87546121209082611fe0565b88556001600160a01b03861660009081526001808a016020908152604080842092880184529190529020541560028314806121585750805b6121655784600101612167565b855b6001600160a01b038816600090815260028b01602052604090205550505050505b50505050565b3390565b6000828211156121e9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080612206836122008787612f5d565b90612fb6565b90508015612222576122226001600160a01b038716338361301d565b61222c8582612192565b9695505050505050565b60006060826001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156122b057600080fd5b81019080805160405193929190846401000000008211156122d057600080fd5b9083019060208201858111156122e557600080fd5b825186602082028301116401000000008211171561230257600080fd5b82525081516020918201928201910280838360005b8381101561232f578181015183820152602001612317565b50505050905001604052505050905060008060008061235587866000815181106110d257fe5b9050600061236a88876001815181106110d257fe5b90506000886001600160a01b03166348d67e1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d60208110156123d157600080fd5b505190506123dd61351a565b896001600160a01b0316636edc2c09896000815181106123f957fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561243d57600080fd5b505afa158015612451573d6000803e3d6000fd5b505050506040513d604081101561246757600080fd5b50805160209182015164ffffffffff16918301919091526001600160d81b03168152600061249f612499838588613081565b866130e2565b90508a6001600160a01b0316636edc2c098a6001815181106124bd57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561250157600080fd5b505afa158015612515573d6000803e3d6000fd5b505050506040513d604081101561252b57600080fd5b50805160209182015164ffffffffff16918401919091526001600160d81b03168252600061255d612499848688613081565b90508b6001600160a01b0316635ed9156d8b60008151811061257b57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b1580156125bf57600080fd5b505afa1580156125d3573d6000803e3d6000fd5b505050506040513d60408110156125e957600080fd5b50805160209182015164ffffffffff16918501919091526001600160d81b03168352600061262161261b85878a613081565b88612e8f565b90508c6001600160a01b0316635ed9156d8c60018151811061263f57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561268357600080fd5b505afa158015612697573d6000803e3d6000fd5b505050506040513d60408110156126ad57600080fd5b50805160209182015164ffffffffff16918601919091526001600160d81b0316845260006126df61261b86888a613081565b90506126f782612200670de0b6b3a764000086612f5d565b9a5061270f84612200670de0b6b3a764000084612f5d565b995061272788612200670de0b6b3a76400008a612f5d565b9850505050505050505061274b81662386f26fc10000612f5d90919063ffffffff16565b612767670de0b6b3a76400006127618686612192565b90612f5d565b109695505050505050565b600061277d83612a0b565b1561279357506001600160a01b0381163161203d565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127e057600080fd5b505afa1580156127f4573d6000803e3d6000fd5b505050506040513d602081101561280a57600080fd5b5051905061203d565b81518190819060005b81816001011015612a025760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d788848151811061286457fe5b602002602001015189856001018151811061287b57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156128d057600080fd5b505afa1580156128e4573d6000803e3d6000fd5b505050506040513d60208110156128fa57600080fd5b5051875190915060009061291d906064906122009085908c90889081106110d257fe5b90508481101561293b57612935856122008884612f5d565b95508094505b816001600160a01b0316631e1401f889858151811061295657fe5b60200260200101518a866001018151811061296d57fe5b6020026020010151886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b1580156129ca57600080fd5b505afa1580156129de573d6000803e3d6000fd5b505050506040513d60208110156129f457600080fd5b50519450505060010161281c565b50509250929050565b6001600160a01b03161590565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261084c9084906130f2565b8160005b8451816001011015612de55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d7878481518110612acc57fe5b6020026020010151888560010181518110612ae357fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015612b3857600080fd5b505afa158015612b4c573d6000803e3d6000fd5b505050506040513d6020811015612b6257600080fd5b50519050612b6f81612236565b612bb5576040805162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b604482015290519081900360640190fd5b6000839050612bc9878481518110611dce57fe5b612c0257612bfe8285898681518110612bde57fe5b60200260200101516001600160a01b03166131a39092919063ffffffff16565b5060005b8651836002011015612ced57816001600160a01b031663d5bcb9b582898681518110612c2a57fe5b60200260200101518a8760010181518110612c4157fe5b6020026020010151886000806040518763ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001826001600160a01b03168152602001955050505050506020604051808303818588803b158015612cb957600080fd5b505af1158015612ccd573d6000803e3d6000fd5b50505050506040513d6020811015612ce457600080fd5b50519350612ddb565b816001600160a01b031663e331d03982898681518110612d0957fe5b60200260200101518a8760010181518110612d2057fe5b602090810291909101810151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b0394851660048201529184166024830152604482018b90526000606483018190526084830152928b1660a4820152915160c48084019382900301818588803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b50505050506040513d6020811015612dd657600080fd5b505193505b5050600101612a83565b50835160011415612e885783600081518110612dfd57fe5b60200260200101516001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612e5b57600080fd5b505af1158015612e6f573d6000803e3d6000fd5b505050506040513d6020811015612e8557600080fd5b50505b9392505050565b6000818310612e9e578161203a565b5090919050565b6001600160a01b038216600090815260018501602090815260408083208484529091528120548015612f5457600083815260208690526040902060038101549054612ef4816122008486612f5d565b6001600160a01b038716600090815260018a01602090815260408083208984529091528120559350612f268184612192565b600086815260208990526040902055612f3f8285612192565b60008681526020899052604090206003015550505b50949350505050565b600082612f6c5750600061203d565b82820282848281612f7957fe5b041461203a5760405162461bcd60e51b815260040180806020018281038252602181526020018061357e6021913960400191505060405180910390fd5b600080821161300c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161301557fe5b049392505050565b801561084c5761302c83612a0b565b1561306d576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015613067573d6000803e3d6000fd5b5061084c565b61084c6001600160a01b0384168383612a18565b6000806130a6846120cb876020015164ffffffffff164261219290919063ffffffff16565b905060006130b48583612192565b905061222c856122006130c78786612f5d565b89516130dc906001600160d81b031686612f5d565b90611fe0565b600081831015612e9e578161203a565b6060613147826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132fd9092919063ffffffff16565b80519091501561084c5780806020019051602081101561316657600080fd5b505161084c5760405162461bcd60e51b815260040180806020018281038252602a81526020018061359f602a913960400191505060405180910390fd5b8015806132425750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561321457600080fd5b505afa158015613228573d6000803e3d6000fd5b505050506040513d602081101561323e57600080fd5b5051155b61327d5760405162461bcd60e51b81526004018080602001828103825260368152602001806135c96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261084c9084906130f2565b606061330c8484600085613314565b949350505050565b6060824710156133555760405162461bcd60e51b81526004018080602001828103825260268152602001806135586026913960400191505060405180910390fd5b61335e85613470565b6133af576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106133ee5780518252601f1990920191602091820191016133cf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613450576040519150601f19603f3d011682016040523d82523d6000602084013e613455565b606091505b5091509150613465828286613476565b979650505050505050565b3b151590565b60608315613485575081612e88565b8251156134955782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134df5781810151838201526020016134c7565b50505050905090810190601f16801561350c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60408051808201909152600080825260208201529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122090b9024338a9e32671bf63cfe0a575fd64447d89a71b58282302ac6b7657016564736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063f2fde38b11610059578063f2fde38b146104a5578063f3aafa80146104d8578063f583adbc14610598578063f5dab711146105d357610153565b80638da5cb5b14610415578063946e1a621461042a5780639e96b2ce1461045d578063ec9545941461049057610153565b80635e8c8bb7116100c65780635e8c8bb714610355578063715018a61461039c57806371646f98146103b157806385731140146103e457610153565b80630931753c146101585780631959a002146102275780631a3991251461026c578063318d9e5d146102a557610153565b366101535733321415610151576040805162461bcd60e51b815260206004820152601660248201527f455448207472616e7366657220666f7262696464656e00000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561016457600080fd5b506101516004803603604081101561017b57600080fd5b81019060208101813564010000000081111561019657600080fd5b8201836020820111156101a857600080fd5b803590602001918460208302840111640100000000831117156101ca57600080fd5b9193909290916020810190356401000000008111156101e857600080fd5b8201836020820111156101fa57600080fd5b8035906020019184602083028401116401000000008311171561021c57600080fd5b50909250905061061f565b34801561023357600080fd5b5061025a6004803603602081101561024a57600080fd5b50356001600160a01b0316610670565b60408051918252519081900360200190f35b34801561027857600080fd5b506101516004803603604081101561028f57600080fd5b506001600160a01b038135169060200135610682565b3480156102b157600080fd5b50610151600480360360208110156102c857600080fd5b8101906020810181356401000000008111156102e357600080fd5b8201836020820111156102f557600080fd5b8035906020019184602083028401116401000000008311171561031757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061072b945050505050565b34801561036157600080fd5b506103886004803603602081101561037857600080fd5b50356001600160a01b0316610851565b604080519115158252519081900360200190f35b3480156103a857600080fd5b50610151610866565b3480156103bd57600080fd5b50610151600480360360208110156103d457600080fd5b50356001600160a01b0316610931565b3480156103f057600080fd5b506103f9610d8b565b604080516001600160a01b039092168252519081900360200190f35b34801561042157600080fd5b506103f9610daf565b34801561043657600080fd5b506101516004803603602081101561044d57600080fd5b50356001600160a01b0316610dbe565b34801561046957600080fd5b506101516004803603602081101561048057600080fd5b50356001600160a01b03166112d8565b34801561049c57600080fd5b506103f9611527565b3480156104b157600080fd5b50610151600480360360208110156104c857600080fd5b50356001600160a01b031661154b565b3480156104e457600080fd5b50610151600480360360408110156104fb57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561052657600080fd5b82018360208201111561053857600080fd5b8035906020019184602083028401116401000000008311171561055a57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061166c945050505050565b3480156105a457600080fd5b50610151600480360360408110156105bb57600080fd5b506001600160a01b0381351690602001351515611f25565b3480156105df57600080fd5b50610606600480360360208110156105f657600080fd5b50356001600160a01b0316611fc4565b6040805192835260208301919091528051918290030190f35b60005b838110156106695761066185858381811061063957fe5b905060200201356001600160a01b031684848481811061065557fe5b90506020020135610682565b600101610622565b5050505050565b60036020526000908152604090205481565b3360008181526004602090815260408083206001600160a01b038716845260038352818420600282015486865260018201855283862081875290945291909320549091906106d09086611fe0565b6001600160a01b0385166000908152600184016020908152604080832085845282528083209390935585905220546107089086611fe0565b60008281526020859052604090205561072382848684612043565b505050505050565b336000908152600360205260408120905b82518110156107a057600083828151811061075357fe5b60200260200101519050600060046000836001600160a01b03166001600160a01b0316815260200190815260200160002090506107968482848460020154612043565b505060010161073c565b508054600181111561084c57600182556040805163a9059cbb60e01b81523360048201526000198301602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561082257600080fd5b505af1158015610836573d6000803e3d6000fd5b505050506040513d602081101561066957600080fd5b505050565b60016020526000908152604090205460ff1681565b61086e61218e565b6001600160a01b031661087f610daf565b6001600160a01b0316146108da576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600280541415610988576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038084166004830152915183927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b1580156109f657600080fd5b505afa158015610a0a573d6000803e3d6000fd5b505050506040513d6020811015610a2057600080fd5b5051610a67576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b6001600160a01b03821660009081526004602090815260408083203384526003909252909120600180830154600284015490918190610aa7908490611fe0565b14610af9576040805162461bcd60e51b815260206004820152601760248201527f45706f636820616c72656164792066696e616c697a6564000000000000000000604482015290519081900360640190fd5b6001600160a01b03861660009081526002840160205260409020548214610b67576040805162461bcd60e51b815260206004820152601b60248201527f45706f63682066756e647320616c726561647920636c61696d65640000000000604482015290519081900360640190fd5b6001600160a01b038616600090815260028401602090815260408083208490556001860182528083208584529091529020548015610d7d5760008381526020868152604080832080546001600160a01b038c16855260018901845282852088865290935290832092909255610bdc8184612192565b82600001819055506060896001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c5c57600080fd5b8101908080516040519392919084640100000000821115610c7c57600080fd5b908301906020820185811115610c9157600080fd5b8251866020820283011164010000000082111715610cae57600080fd5b82525081516020918201928201910280838360005b83811015610cdb578181015183820152602001610cc3565b505050509050016040525050509050610d0e81600081518110610cfa57fe5b6020026020010151846001015486856121ef565b8360010181905550610d3a81600181518110610d2657fe5b6020026020010151846002015486856121ef565b60028401556003830154610d71907f00000000000000000000000000000000000000000000000000000000000000009086856121ef565b83600301819055505050505b505060016002555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031690565b600280541415610e15576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038084166004830152915183927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b158015610e8357600080fd5b505afa158015610e97573d6000803e3d6000fd5b505050506040513d6020811015610ead57600080fd5b5051610ef4576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b81610efe81612236565b610f44576040805162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b604482015290519081900360640190fd5b6001600160a01b0383166000908152600460205260409020600281015460018201548114610fb9576040805162461bcd60e51b815260206004820152601f60248201527f50726576696f75732065706f6368206973206e6f742066696e616c697a656400604482015290519081900360640190fd5b6060856001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610ff457600080fd5b505afa158015611008573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561103157600080fd5b810190808051604051939291908464010000000082111561105157600080fd5b90830190602082018581111561106657600080fd5b825186602082028301116401000000008211171561108357600080fd5b82525081516020918201928201910280838360005b838110156110b0578181015183820152602001611098565b50505050905001604052505050905060006110f130836000815181106110d257fe5b60200260200101516001600160a01b031661277290919063ffffffff16565b9050600061110630846001815181106110d257fe5b9050876001600160a01b0316635915d806896001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561116457600080fd5b505afa158015611178573d6000803e3d6000fd5b505050506040513d602081101561118e57600080fd5b50516040805160008082526020820190925290506040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156111f75781810151838201526020016111df565b5050505090500193505050506040805180830381600087803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561125557600080fd5b5050825161127690839061127090309087906000906110d257fe5b90612192565b856000016000868152602001908152602001600020600101819055506112a78161127030866001815181106110d257fe5b6000858152602087905260409020600201556112c4846001611fe0565b600295860155505060019092555050505050565b60028054141561132f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038084166004830152915183927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d60208110156113c757600080fd5b505161140e576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b6001600160a01b038216600081815260046020908152604080832033845260038352818420600282015495855260018101845282852086865290935292205491929091801561151a576001600160a01b038616600090815260018401602090815260408083208584528252808320839055908690529020546114909082612192565b60008381526020868152604080832093909355825163a9059cbb60e01b81523360048201526024810185905292516001600160a01b038a169363a9059cbb9360448083019493928390030190829087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b50505b5050600160025550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61155361218e565b6001600160a01b0316611564610daf565b6001600160a01b0316146115bf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166116045760405162461bcd60e51b81526004018080602001828103825260268152602001806135326026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002805414156116c3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805560408051635b16ebb760e01b81526001600160a01b038085166004830152915184927f00000000000000000000000000000000000000000000000000000000000000001691635b16ebb7916024808301926020929190829003018186803b15801561173157600080fd5b505afa158015611745573d6000803e3d6000fd5b505050506040513d602081101561175b57600080fd5b50516117a2576040805162461bcd60e51b81526020600482015260116024820152700496e76616c6964206d6f6f6e697377617607c1b604482015290519081900360640190fd5b8160008151116117f9576040805162461bcd60e51b815260206004820152601460248201527f4d696e2070617468206c656e6774682069732031000000000000000000000000604482015290519081900360640190fd5b600581511061184f576040805162461bcd60e51b815260206004820152601460248201527f4d61782070617468206c656e6774682069732034000000000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168160018351038151811061188957fe5b60200260200101516001600160a01b0316146118ec576040805162461bcd60e51b815260206004820152601b60248201527f53686f756c64207377617020746f2074617267657420746f6b656e0000000000604482015290519081900360640190fd5b60015b815181600101101561198b576001600083838151811061190b57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16611983576040805162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f742077686974656c69737465640000000000000000604482015290519081900360640190fd5b6001016118ef565b506001600160a01b03841660009081526004602090815260408083206001808201548086529382905291909320600284015490916119ca908490611fe0565b14611a1c576040805162461bcd60e51b815260206004820152601c60248201527f507265762065706f636820616c72656164792066696e616c697a656400000000604482015290519081900360640190fd5b6060876001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015611a5757600080fd5b505afa158015611a6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611a9457600080fd5b8101908080516040519392919084640100000000821115611ab457600080fd5b908301906020820185811115611ac957600080fd5b8251866020820283011164010000000082111715611ae657600080fd5b82525081516020918201928201910280838360005b83811015611b13578181015183820152602001611afb565b505050509050016040525050509050600081600081518110611b3157fe5b60200260200101516001600160a01b031688600081518110611b4f57fe5b60200260200101516001600160a01b03161415611b7157506001820154611c0b565b81600181518110611b7e57fe5b60200260200101516001600160a01b031688600081518110611b9c57fe5b60200260200101516001600160a01b03161415611bbe57506002820154611c0b565b6040805162461bcd60e51b815260206004820152601360248201527f496e76616c696420666972737420746f6b656e00000000000000000000000000604482015290519081900360640190fd5b600080611c188a84612813565b915091508060001415611e53578215611e4e57818314611c7f576040805162461bcd60e51b815260206004820152601c60248201527f617661696c61626c6542616c616e6365206973206e6f74206475737400000000604482015290519081900360640190fd5b60005b8a51816001011015611dbd5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d78d8481518110611ccb57fe5b60200260200101518e8560010181518110611ce257fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015611d3757600080fd5b505afa158015611d4b573d6000803e3d6000fd5b505050506040513d6020811015611d6157600080fd5b50519050611d6e81612236565b611db4576040805162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b604482015290519081900360640190fd5b50600101611c82565b50611de48a600081518110611dce57fe5b60200260200101516001600160a01b0316612a0b565b15611e1c57604051329084156108fc029085906000818181858888f19350505050158015611e16573d6000803e3d6000fd5b50611e4e565b611e4e8b848c600081518110611e2e57fe5b60200260200101516001600160a01b0316612a189092919063ffffffff16565b611e79565b6000611e608b8430612a7f565b6003870154909150611e729082611fe0565b6003870155505b83600081518110611e8657fe5b60200260200101516001600160a01b03168a600081518110611ea457fe5b60200260200101516001600160a01b03161415611ed4576001850154611eca9083612192565b6001860155611ee9565b6002850154611ee39083612192565b60028601555b6001850154158015611efd57506002850154155b15611f1357611f0d866001611fe0565b60018801555b50506001600255505050505050505050565b611f2d61218e565b6001600160a01b0316611f3e610daf565b6001600160a01b031614611f99576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6004602052600090815260409020600181015460029091015482565b60008282018381101561203a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6001600160a01b03821660009081526001850160209081526040808320600288018352818420548452909152902054612098576001600160a01b03821660009081526002850160205260409020819055612188565b6001600160a01b0382166000908152600280860160205260408220546001860154909290916120d0906120cb8486612192565b612e8f565b9050806120df57505050612188565b60006120ed88888887612ea5565b905060018211156121145761211161210a89898988600101612ea5565b8290611fe0565b90505b87546121209082611fe0565b88556001600160a01b03861660009081526001808a016020908152604080842092880184529190529020541560028314806121585750805b6121655784600101612167565b855b6001600160a01b038816600090815260028b01602052604090205550505050505b50505050565b3390565b6000828211156121e9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080612206836122008787612f5d565b90612fb6565b90508015612222576122226001600160a01b038716338361301d565b61222c8582612192565b9695505050505050565b60006060826001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156122b057600080fd5b81019080805160405193929190846401000000008211156122d057600080fd5b9083019060208201858111156122e557600080fd5b825186602082028301116401000000008211171561230257600080fd5b82525081516020918201928201910280838360005b8381101561232f578181015183820152602001612317565b50505050905001604052505050905060008060008061235587866000815181106110d257fe5b9050600061236a88876001815181106110d257fe5b90506000886001600160a01b03166348d67e1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d60208110156123d157600080fd5b505190506123dd61351a565b896001600160a01b0316636edc2c09896000815181106123f957fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561243d57600080fd5b505afa158015612451573d6000803e3d6000fd5b505050506040513d604081101561246757600080fd5b50805160209182015164ffffffffff16918301919091526001600160d81b03168152600061249f612499838588613081565b866130e2565b90508a6001600160a01b0316636edc2c098a6001815181106124bd57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561250157600080fd5b505afa158015612515573d6000803e3d6000fd5b505050506040513d604081101561252b57600080fd5b50805160209182015164ffffffffff16918401919091526001600160d81b03168252600061255d612499848688613081565b90508b6001600160a01b0316635ed9156d8b60008151811061257b57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b1580156125bf57600080fd5b505afa1580156125d3573d6000803e3d6000fd5b505050506040513d60408110156125e957600080fd5b50805160209182015164ffffffffff16918501919091526001600160d81b03168352600061262161261b85878a613081565b88612e8f565b90508c6001600160a01b0316635ed9156d8c60018151811061263f57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b15801561268357600080fd5b505afa158015612697573d6000803e3d6000fd5b505050506040513d60408110156126ad57600080fd5b50805160209182015164ffffffffff16918601919091526001600160d81b0316845260006126df61261b86888a613081565b90506126f782612200670de0b6b3a764000086612f5d565b9a5061270f84612200670de0b6b3a764000084612f5d565b995061272788612200670de0b6b3a76400008a612f5d565b9850505050505050505061274b81662386f26fc10000612f5d90919063ffffffff16565b612767670de0b6b3a76400006127618686612192565b90612f5d565b109695505050505050565b600061277d83612a0b565b1561279357506001600160a01b0381163161203d565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127e057600080fd5b505afa1580156127f4573d6000803e3d6000fd5b505050506040513d602081101561280a57600080fd5b5051905061203d565b81518190819060005b81816001011015612a025760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d788848151811061286457fe5b602002602001015189856001018151811061287b57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156128d057600080fd5b505afa1580156128e4573d6000803e3d6000fd5b505050506040513d60208110156128fa57600080fd5b5051875190915060009061291d906064906122009085908c90889081106110d257fe5b90508481101561293b57612935856122008884612f5d565b95508094505b816001600160a01b0316631e1401f889858151811061295657fe5b60200260200101518a866001018151811061296d57fe5b6020026020010151886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b1580156129ca57600080fd5b505afa1580156129de573d6000803e3d6000fd5b505050506040513d60208110156129f457600080fd5b50519450505060010161281c565b50509250929050565b6001600160a01b03161590565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261084c9084906130f2565b8160005b8451816001011015612de55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663901754d7878481518110612acc57fe5b6020026020010151888560010181518110612ae357fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015612b3857600080fd5b505afa158015612b4c573d6000803e3d6000fd5b505050506040513d6020811015612b6257600080fd5b50519050612b6f81612236565b612bb5576040805162461bcd60e51b81526020600482015260126024820152710a6e0e4cac2c840d2e640e8dede40d0d2ced60731b604482015290519081900360640190fd5b6000839050612bc9878481518110611dce57fe5b612c0257612bfe8285898681518110612bde57fe5b60200260200101516001600160a01b03166131a39092919063ffffffff16565b5060005b8651836002011015612ced57816001600160a01b031663d5bcb9b582898681518110612c2a57fe5b60200260200101518a8760010181518110612c4157fe5b6020026020010151886000806040518763ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001826001600160a01b03168152602001955050505050506020604051808303818588803b158015612cb957600080fd5b505af1158015612ccd573d6000803e3d6000fd5b50505050506040513d6020811015612ce457600080fd5b50519350612ddb565b816001600160a01b031663e331d03982898681518110612d0957fe5b60200260200101518a8760010181518110612d2057fe5b602090810291909101810151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b0394851660048201529184166024830152604482018b90526000606483018190526084830152928b1660a4820152915160c48084019382900301818588803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b50505050506040513d6020811015612dd657600080fd5b505193505b5050600101612a83565b50835160011415612e885783600081518110612dfd57fe5b60200260200101516001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612e5b57600080fd5b505af1158015612e6f573d6000803e3d6000fd5b505050506040513d6020811015612e8557600080fd5b50505b9392505050565b6000818310612e9e578161203a565b5090919050565b6001600160a01b038216600090815260018501602090815260408083208484529091528120548015612f5457600083815260208690526040902060038101549054612ef4816122008486612f5d565b6001600160a01b038716600090815260018a01602090815260408083208984529091528120559350612f268184612192565b600086815260208990526040902055612f3f8285612192565b60008681526020899052604090206003015550505b50949350505050565b600082612f6c5750600061203d565b82820282848281612f7957fe5b041461203a5760405162461bcd60e51b815260040180806020018281038252602181526020018061357e6021913960400191505060405180910390fd5b600080821161300c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161301557fe5b049392505050565b801561084c5761302c83612a0b565b1561306d576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015613067573d6000803e3d6000fd5b5061084c565b61084c6001600160a01b0384168383612a18565b6000806130a6846120cb876020015164ffffffffff164261219290919063ffffffff16565b905060006130b48583612192565b905061222c856122006130c78786612f5d565b89516130dc906001600160d81b031686612f5d565b90611fe0565b600081831015612e9e578161203a565b6060613147826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132fd9092919063ffffffff16565b80519091501561084c5780806020019051602081101561316657600080fd5b505161084c5760405162461bcd60e51b815260040180806020018281038252602a81526020018061359f602a913960400191505060405180910390fd5b8015806132425750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561321457600080fd5b505afa158015613228573d6000803e3d6000fd5b505050506040513d602081101561323e57600080fd5b5051155b61327d5760405162461bcd60e51b81526004018080602001828103825260368152602001806135c96036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261084c9084906130f2565b606061330c8484600085613314565b949350505050565b6060824710156133555760405162461bcd60e51b81526004018080602001828103825260268152602001806135586026913960400191505060405180910390fd5b61335e85613470565b6133af576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106133ee5780518252601f1990920191602091820191016133cf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613450576040519150601f19603f3d011682016040523d82523d6000602084013e613455565b606091505b5091509150613465828286613476565b979650505050505050565b3b151590565b60608315613485575081612e88565b8251156134955782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134df5781810151838201526020016134c7565b50505050905090810190601f16801561350c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60408051808201909152600080825260208201529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122090b9024338a9e32671bf63cfe0a575fd64447d89a71b58282302ac6b7657016564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11019,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "pathWhitelist",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)1118,t_bool)"
      },
      {
        "astId": 1753,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3869,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)3847_storage)"
      },
      {
        "astId": 3873,
        "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)1118,t_struct(TokenInfo)3865_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3847_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReferralFeeReceiver.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3847_storage"
      },
      "t_mapping(t_contract(IERC20)1118,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)1118,t_struct(TokenInfo)3865_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => struct ReferralFeeReceiver.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)3865_storage"
      },
      "t_mapping(t_contract(IERC20)1118,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(EpochBalance)3856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReferralFeeReceiver.EpochBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(EpochBalance)3856_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EpochBalance)3856_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.EpochBalance",
        "members": [
          {
            "astId": 3849,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3851,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token0Balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3853,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "token1Balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3855,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "inchBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)3865_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.TokenInfo",
        "members": [
          {
            "astId": 3860,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "epochBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(EpochBalance)3856_storage)"
          },
          {
            "astId": 3862,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3864,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "currentEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)3847_storage": {
        "encoding": "inplace",
        "label": "struct ReferralFeeReceiver.UserInfo",
        "members": [
          {
            "astId": 3836,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3842,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3846,
            "contract": "contracts/ReferralFeeReceiver.sol:ReferralFeeReceiver",
            "label": "firstUnprocessedEpoch",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_contract(IERC20)1118,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}