{
  "address": "0x735247fb0a604c0adC6cab38ACE16D0DbA31295F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolOwner",
          "type": "address"
        },
        {
          "internalType": "contract IMooniswapDeployer",
          "name": "_mooniswapDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governanceMothership",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decayPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultDecayPeriodVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DefaultSlippageFeeVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract Mooniswap",
          "name": "mooniswap",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "governanceShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GovernanceShareVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governanceWallet",
          "type": "address"
        }
      ],
      "name": "GovernanceWalletUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralShareVoteUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultDecayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultDecayPeriodVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "defaultDecayPeriodVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "defaultFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSlippageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "defaultSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "defaultSlippageFeeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultDecayPeriodVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardDefaultSlippageFeeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardGovernanceShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discardReferralShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "internalType": "contract Mooniswap[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "governanceShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "governanceShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFeeCollector",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mooniswapDeployer",
      "outputs": [
        {
          "internalType": "contract IMooniswapDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mothership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "notifyStakeChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBalances",
          "type": "uint256[]"
        }
      ],
      "name": "notifyStakesChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract Mooniswap",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "name": "referralShareVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "referralShareVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernanceWallet",
          "type": "address"
        }
      ],
      "name": "setGovernanceWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualDefaultDecayPeriod",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualDefaultFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualDefaultSlippageFee",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualGovernanceShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualReferralShare",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "",
          "type": "uint104"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b2ce96e3e994500c105018b463871ff1dcf0e85de95dff450691cc1a55616ea",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x735247fb0a604c0adC6cab38ACE16D0DbA31295F",
    "transactionIndex": 5,
    "gasUsed": "2876888",
    "logsBloom": "0x
    "blockHash": "0x2da1414c2ae1a0375879161c6f959ab010319e656b1bcb8fdaf2d515e9aa42e0",
    "transactionHash": "0x5b2ce96e3e994500c105018b463871ff1dcf0e85de95dff450691cc1a55616ea",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 24096478,
        "transactionHash": "0x5b2ce96e3e994500c105018b463871ff1dcf0e85de95dff450691cc1a55616ea",
        "address": "0x735247fb0a604c0adC6cab38ACE16D0DbA31295F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x2da1414c2ae1a0375879161c6f959ab010319e656b1bcb8fdaf2d515e9aa42e0"
      }
    ],
    "blockNumber": 24096478,
    "cumulativeGasUsed": "3385837",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x910bf2d50fA5e014Fd06666f456182D4Ab7c8bd2",
    "0xCCf6b19bc2419E776b6ee030044811dA846686fb",
    "0x11DEE30E710B8d4a8630392781Cc3c0046365d4c"
  ],
  "solcInputHash": "4dd535321b80fd9ff34a7b95c5024f19",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolOwner\",\"type\":\"address\"},{\"internalType\":\"contract IMooniswapDeployer\",\"name\":\"_mooniswapDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceMothership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decayPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultDecayPeriodVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DefaultSlippageFeeVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract Mooniswap\",\"name\":\"mooniswap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governanceShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovernanceShareVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governanceWallet\",\"type\":\"address\"}],\"name\":\"GovernanceWalletUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralShareVoteUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDecayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultDecayPeriodVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"defaultDecayPeriodVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"defaultFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSlippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"defaultSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"defaultSlippageFeeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultDecayPeriodVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardDefaultSlippageFeeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardGovernanceShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discardReferralShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"contract Mooniswap[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"governanceShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"governanceShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeCollector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooniswapDeployer\",\"outputs\":[{\"internalType\":\"contract IMooniswapDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mothership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"notifyStakeChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBalances\",\"type\":\"uint256[]\"}],\"name\":\"notifyStakesChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract Mooniswap\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"name\":\"referralShareVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"referralShareVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernanceWallet\",\"type\":\"address\"}],\"name\":\"setGovernanceWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualDefaultDecayPeriod\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualDefaultFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualDefaultSlippageFee\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualGovernanceShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualReferralShare\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MooniswapFactory.sol\":\"MooniswapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Mooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./libraries/UniERC20.sol\\\";\\nimport \\\"./libraries/Sqrt.sol\\\";\\nimport \\\"./libraries/VirtualBalance.sol\\\";\\nimport \\\"./governance/MooniswapGovernance.sol\\\";\\n\\n\\ncontract Mooniswap is MooniswapGovernance {\\n    using Sqrt for uint256;\\n    using SafeMath for uint256;\\n    using UniERC20 for IERC20;\\n    using VirtualBalance for VirtualBalance.Data;\\n\\n    struct Balances {\\n        uint256 src;\\n        uint256 dst;\\n    }\\n\\n    struct SwapVolumes {\\n        uint128 confirmed;\\n        uint128 result;\\n    }\\n\\n    struct Fees {\\n        uint256 fee;\\n        uint256 slippageFee;\\n    }\\n\\n    event Error(string reason);\\n\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 share,\\n        uint256 token0Amount,\\n        uint256 token1Amount\\n    );\\n\\n    event Swapped(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 result,\\n        uint256 srcAdditionBalance,\\n        uint256 dstRemovalBalance,\\n        address referral\\n    );\\n\\n    event Sync(\\n        uint256 srcBalance,\\n        uint256 dstBalance,\\n        uint256 fee,\\n        uint256 slippageFee,\\n        uint256 referralShare,\\n        uint256 governanceShare\\n    );\\n\\n    uint256 private constant _BASE_SUPPLY = 1000;  // Total supply on first deposit\\n\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n    mapping(IERC20 => SwapVolumes) public volumes;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\\n    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\\n\\n    modifier whenNotShutdown {\\n        require(mooniswapFactoryGovernance.isActive(), \\\"Mooniswap: factory shutdown\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory name,\\n        string memory symbol,\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance\\n    )\\n        public\\n        ERC20(name, symbol)\\n        MooniswapGovernance(_mooniswapFactoryGovernance)\\n    {\\n        require(bytes(name).length > 0, \\\"Mooniswap: name is empty\\\");\\n        require(bytes(symbol).length > 0, \\\"Mooniswap: symbol is empty\\\");\\n        require(_token0 != _token1, \\\"Mooniswap: duplicate tokens\\\");\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function getTokens() external view returns(IERC20[] memory tokens) {\\n        tokens = new IERC20[](2);\\n        tokens[0] = token0;\\n        tokens[1] = token1;\\n    }\\n\\n    function tokens(uint256 i) external view returns(IERC20) {\\n        if (i == 0) {\\n            return token0;\\n        } else if (i == 1) {\\n            return token1;\\n        } else {\\n            revert(\\\"Pool has two tokens\\\");\\n        }\\n    }\\n\\n    function getBalanceForAddition(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.uniBalanceOf(address(this));\\n        return Math.max(virtualBalancesForAddition[token].current(decayPeriod(), balance), balance);\\n    }\\n\\n    function getBalanceForRemoval(IERC20 token) public view returns(uint256) {\\n        uint256 balance = token.uniBalanceOf(address(this));\\n        return Math.min(virtualBalancesForRemoval[token].current(decayPeriod(), balance), balance);\\n    }\\n\\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256) {\\n        return _getReturn(src, dst, amount, getBalanceForAddition(src), getBalanceForRemoval(dst), fee(), slippageFee());\\n    }\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts) external payable returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        return depositFor(maxAmounts, minAmounts, msg.sender);\\n    }\\n\\n    function depositFor(uint256[2] memory maxAmounts, uint256[2] memory minAmounts, address target) public payable nonReentrant returns(uint256 fairSupply, uint256[2] memory receivedAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n        require(msg.value == (_tokens[0].isETH() ? maxAmounts[0] : (_tokens[1].isETH() ? maxAmounts[1] : 0)), \\\"Mooniswap: wrong value usage\\\");\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalSupply == 0) {\\n            fairSupply = _BASE_SUPPLY.mul(99);\\n            _mint(address(this), _BASE_SUPPLY); // Donate up to 1%\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.max(fairSupply, maxAmounts[i]);\\n\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                require(maxAmounts[i] >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].uniTransferFrom(msg.sender, address(this), maxAmounts[i]);\\n                receivedAmounts[i] = maxAmounts[i];\\n            }\\n        }\\n        else {\\n            uint256[2] memory realBalances;\\n            for (uint i = 0; i < realBalances.length; i++) {\\n                realBalances[i] = _tokens[i].uniBalanceOf(address(this)).sub(_tokens[i].isETH() ? msg.value : 0);\\n            }\\n\\n            // Pre-compute fair supply\\n            fairSupply = type(uint256).max;\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(maxAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 fairSupplyCached = fairSupply;\\n\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                require(maxAmounts[i] > 0, \\\"Mooniswap: amount is zero\\\");\\n                uint256 amount = realBalances[i].mul(fairSupplyCached).add(totalSupply - 1).div(totalSupply);\\n                require(amount >= minAmounts[i], \\\"Mooniswap: minAmount not reached\\\");\\n\\n                _tokens[i].uniTransferFrom(msg.sender, address(this), amount);\\n                receivedAmounts[i] = _tokens[i].uniBalanceOf(address(this)).sub(realBalances[i]);\\n                fairSupply = Math.min(fairSupply, totalSupply.mul(receivedAmounts[i]).div(realBalances[i]));\\n            }\\n\\n            uint256 _decayPeriod = decayPeriod();  // gas savings\\n            for (uint i = 0; i < maxAmounts.length; i++) {\\n                virtualBalancesForRemoval[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n                virtualBalancesForAddition[_tokens[i]].scale(_decayPeriod, realBalances[i], totalSupply.add(fairSupply), totalSupply);\\n            }\\n        }\\n\\n        require(fairSupply > 0, \\\"Mooniswap: result is not enough\\\");\\n        _mint(target, fairSupply);\\n\\n        emit Deposited(msg.sender, target, fairSupply, receivedAmounts[0], receivedAmounts[1]);\\n    }\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns) external returns(uint256[2] memory withdrawnAmounts) {\\n        return withdrawFor(amount, minReturns, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 amount, uint256[] memory minReturns, address payable target) public nonReentrant returns(uint256[2] memory withdrawnAmounts) {\\n        IERC20[2] memory _tokens = [token0, token1];\\n\\n        uint256 totalSupply = totalSupply();\\n        uint256 _decayPeriod = decayPeriod();  // gas savings\\n        _burn(msg.sender, amount);\\n\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = _tokens[i];\\n\\n            uint256 preBalance = token.uniBalanceOf(address(this));\\n            uint256 value = preBalance.mul(amount).div(totalSupply);\\n            token.uniTransfer(target, value);\\n            withdrawnAmounts[i] = value;\\n            require(i >= minReturns.length || value >= minReturns[i], \\\"Mooniswap: result is not enough\\\");\\n\\n            virtualBalancesForAddition[token].scale(_decayPeriod, preBalance, totalSupply.sub(amount), totalSupply);\\n            virtualBalancesForRemoval[token].scale(_decayPeriod, preBalance, totalSupply.sub(amount), totalSupply);\\n        }\\n\\n        emit Withdrawn(msg.sender, target, amount, withdrawnAmounts[0], withdrawnAmounts[1]);\\n    }\\n\\n    function swap(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 result) {\\n        return swapFor(src, dst, amount, minReturn, referral, msg.sender);\\n    }\\n\\n    function swapFor(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address referral, address payable receiver) public payable nonReentrant whenNotShutdown returns(uint256 result) {\\n        require(msg.value == (src.isETH() ? amount : 0), \\\"Mooniswap: wrong value usage\\\");\\n\\n        Balances memory balances = Balances({\\n            src: src.uniBalanceOf(address(this)).sub(src.isETH() ? msg.value : 0),\\n            dst: dst.uniBalanceOf(address(this))\\n        });\\n        uint256 confirmed;\\n        Balances memory virtualBalances;\\n        Fees memory fees = Fees({\\n            fee: fee(),\\n            slippageFee: slippageFee()\\n        });\\n        (confirmed, result, virtualBalances) = _doTransfers(src, dst, amount, minReturn, receiver, balances, fees);\\n        emit Swapped(msg.sender, receiver, address(src), address(dst), confirmed, result, virtualBalances.src, virtualBalances.dst, referral);\\n        _mintRewards(confirmed, result, referral, balances, fees);\\n\\n        // Overflow of uint128 is desired\\n        volumes[src].confirmed += uint128(confirmed);\\n        volumes[src].result += uint128(result);\\n    }\\n\\n    function _doTransfers(IERC20 src, IERC20 dst, uint256 amount, uint256 minReturn, address payable receiver, Balances memory balances, Fees memory fees)\\n        private returns(uint256 confirmed, uint256 result, Balances memory virtualBalances)\\n    {\\n        uint256 _decayPeriod = decayPeriod();\\n        virtualBalances.src = virtualBalancesForAddition[src].current(_decayPeriod, balances.src);\\n        virtualBalances.src = Math.max(virtualBalances.src, balances.src);\\n        virtualBalances.dst = virtualBalancesForRemoval[dst].current(_decayPeriod, balances.dst);\\n        virtualBalances.dst = Math.min(virtualBalances.dst, balances.dst);\\n        src.uniTransferFrom(msg.sender, address(this), amount);\\n        confirmed = src.uniBalanceOf(address(this)).sub(balances.src);\\n        result = _getReturn(src, dst, confirmed, virtualBalances.src, virtualBalances.dst, fees.fee, fees.slippageFee);\\n        require(result > 0 && result >= minReturn, \\\"Mooniswap: return is not enough\\\");\\n        dst.uniTransfer(receiver, result);\\n\\n        // Update virtual balances to the same direction only at imbalanced state\\n        if (virtualBalances.src != balances.src) {\\n            virtualBalancesForAddition[src].set(virtualBalances.src.add(confirmed));\\n        }\\n        if (virtualBalances.dst != balances.dst) {\\n            virtualBalancesForRemoval[dst].set(virtualBalances.dst.sub(result));\\n        }\\n        // Update virtual balances to the opposite direction\\n        virtualBalancesForRemoval[src].update(_decayPeriod, balances.src);\\n        virtualBalancesForAddition[dst].update(_decayPeriod, balances.dst);\\n    }\\n\\n    function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {\\n        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();\\n\\n        uint256 refReward;\\n        uint256 govReward;\\n\\n        uint256 invariantRatio = uint256(1e36);\\n        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);\\n        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).div(balances.dst);\\n        if (invariantRatio > 1e36) {\\n            // calculate share only if invariant increased\\n            invariantRatio = invariantRatio.sqrt();\\n            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);\\n\\n            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;\\n\\n            if (feeCollector == address(0)) {\\n                if (refReward > 0) {\\n                    _mint(referral, refReward);\\n                }\\n                if (govReward > 0) {\\n                    _mint(govWallet, govReward);\\n                }\\n            }\\n            else if (refReward > 0 || govReward > 0) {\\n                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);\\n                address[] memory wallets = new address[](len);\\n                uint256[] memory rewards = new uint256[](len);\\n\\n                wallets[0] = referral;\\n                rewards[0] = refReward;\\n                if (govReward > 0) {\\n                    wallets[len - 1] = govWallet;\\n                    rewards[len - 1] = govReward;\\n                }\\n\\n                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {\\n                    _mint(feeCollector, refReward.add(govReward));\\n                }\\n                catch {\\n                    emit Error(\\\"updateRewards() failed\\\");\\n                }\\n            }\\n        }\\n\\n        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);\\n    }\\n\\n    /*\\n        spot_ret = dx * y / x\\n        uni_ret = dx * y / (x + dx)\\n        slippage = (spot_ret - uni_ret) / spot_ret\\n        slippage = dx * dx * y / (x * (x + dx)) / (dx * y / x)\\n        slippage = dx / (x + dx)\\n        ret = uni_ret * (1 - slip_fee * slippage)\\n        ret = dx * y / (x + dx) * (1 - slip_fee * dx / (x + dx))\\n        ret = dx * y / (x + dx) * (x + dx - slip_fee * dx) / (x + dx)\\n\\n        x = amount * denominator\\n        dx = amount * (denominator - fee)\\n    */\\n    function _getReturn(IERC20 src, IERC20 dst, uint256 amount, uint256 srcBalance, uint256 dstBalance, uint256 fee, uint256 slippageFee) internal view returns(uint256) {\\n        if (src > dst) {\\n            (src, dst) = (dst, src);\\n        }\\n        if (amount > 0 && src == token0 && dst == token1) {\\n            uint256 taxedAmount = amount.sub(amount.mul(fee).div(MooniswapConstants._FEE_DENOMINATOR));\\n            uint256 srcBalancePlusTaxedAmount = srcBalance.add(taxedAmount);\\n            uint256 ret = taxedAmount.mul(dstBalance).div(srcBalancePlusTaxedAmount);\\n            uint256 feeNumerator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount).sub(slippageFee.mul(taxedAmount));\\n            uint256 feeDenominator = MooniswapConstants._FEE_DENOMINATOR.mul(srcBalancePlusTaxedAmount);\\n            return ret.mul(feeNumerator).div(feeDenominator);\\n        }\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) external nonReentrant onlyOwner {\\n        uint256 balance0 = token0.uniBalanceOf(address(this));\\n        uint256 balance1 = token1.uniBalanceOf(address(this));\\n\\n        token.uniTransfer(msg.sender, amount);\\n\\n        require(token0.uniBalanceOf(address(this)) >= balance0, \\\"Mooniswap: access denied\\\");\\n        require(token1.uniBalanceOf(address(this)) >= balance1, \\\"Mooniswap: access denied\\\");\\n        require(balanceOf(address(this)) >= _BASE_SUPPLY, \\\"Mooniswap: access denied\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf4dfdd316f05e3a1519432a0fb8a4189674eb41928e979fd70189f8337262cc2\",\"license\":\"MIT\"},\"contracts/MooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IMooniswapDeployer.sol\\\";\\nimport \\\"./interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"./libraries/UniERC20.sol\\\";\\nimport \\\"./Mooniswap.sol\\\";\\nimport \\\"./governance/MooniswapFactoryGovernance.sol\\\";\\n\\n\\ncontract MooniswapFactory is IMooniswapFactory, MooniswapFactoryGovernance {\\n    using UniERC20 for IERC20;\\n\\n    event Deployed(\\n        Mooniswap indexed mooniswap,\\n        IERC20 indexed token1,\\n        IERC20 indexed token2\\n    );\\n\\n    IMooniswapDeployer public immutable mooniswapDeployer;\\n    address public immutable poolOwner;\\n    Mooniswap[] public allPools;\\n    mapping(Mooniswap => bool) public override isPool;\\n    mapping(IERC20 => mapping(IERC20 => Mooniswap)) private _pools;\\n\\n    constructor (address _poolOwner, IMooniswapDeployer _mooniswapDeployer, address _governanceMothership) public MooniswapFactoryGovernance(_governanceMothership) {\\n        poolOwner = _poolOwner;\\n        mooniswapDeployer = _mooniswapDeployer;\\n    }\\n\\n    function getAllPools() external view returns(Mooniswap[] memory) {\\n        return allPools;\\n    }\\n\\n    function pools(IERC20 tokenA, IERC20 tokenB) external view override returns (Mooniswap pool) {\\n        (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\\n        return _pools[token1][token2];\\n    }\\n\\n    function deploy(IERC20 tokenA, IERC20 tokenB) public returns(Mooniswap pool) {\\n        require(tokenA != tokenB, \\\"Factory: not support same tokens\\\");\\n        (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\\n        require(_pools[token1][token2] == Mooniswap(0), \\\"Factory: pool already exists\\\");\\n\\n        string memory symbol1 = token1.uniSymbol();\\n        string memory symbol2 = token2.uniSymbol();\\n\\n        pool = mooniswapDeployer.deploy(\\n            token1,\\n            token2,\\n            string(abi.encodePacked(\\\"1inch Liquidity Pool (\\\", symbol1, \\\"-\\\", symbol2, \\\")\\\")),\\n            string(abi.encodePacked(\\\"1LP-\\\", symbol1, \\\"-\\\", symbol2)),\\n            poolOwner\\n        );\\n\\n        _pools[token1][token2] = pool;\\n        allPools.push(pool);\\n        isPool[pool] = true;\\n\\n        emit Deployed(pool, token1, token2);\\n    }\\n\\n    function sortTokens(IERC20 tokenA, IERC20 tokenB) public pure returns(IERC20, IERC20) {\\n        if (tokenA < tokenB) {\\n            return (tokenA, tokenB);\\n        }\\n        return (tokenB, tokenA);\\n    }\\n}\\n\",\"keccak256\":\"0x203be490719cbd32b2f7242e6699068f595e3409978af7944a7606b25b6a6f1a\",\"license\":\"MIT\"},\"contracts/governance/BaseGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IGovernanceModule.sol\\\";\\n\\n\\nabstract contract BaseGovernanceModule is IGovernanceModule {\\n    address public immutable mothership;\\n\\n    modifier onlyMothership {\\n        require(msg.sender == mothership, \\\"Access restricted to mothership\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _mothership) public {\\n        mothership = _mothership;\\n    }\\n\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external override onlyMothership {\\n        require(accounts.length == newBalances.length, \\\"Arrays length should be equal\\\");\\n\\n        for(uint256 i = 0; i < accounts.length; ++i) {\\n            _notifyStakeChanged(accounts[i], newBalances[i]);\\n        }\\n    }\\n\\n    function notifyStakeChanged(address account, uint256 newBalance) external override onlyMothership {\\n        _notifyStakeChanged(account, newBalance);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal virtual;\\n}\\n\",\"keccak256\":\"0x585f484d08c1a49536780efb1b25d8bd3a3af325fb1cd40d0e76f63a0095f10d\",\"license\":\"MIT\"},\"contracts/governance/MooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/ExplicitLiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../utils/BalanceAccounting.sol\\\";\\nimport \\\"./BaseGovernanceModule.sol\\\";\\n\\n\\ncontract MooniswapFactoryGovernance is IMooniswapFactoryGovernance, BaseGovernanceModule, BalanceAccounting, Ownable, Pausable {\\n    using Vote for Vote.Data;\\n    using ExplicitLiquidVoting for ExplicitLiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    event DefaultFeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event DefaultSlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n    event DefaultDecayPeriodVoteUpdate(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\n    event ReferralShareVoteUpdate(address indexed user, uint256 referralShare, bool isDefault, uint256 amount);\\n    event GovernanceShareVoteUpdate(address indexed user, uint256 governanceShare, bool isDefault, uint256 amount);\\n    event GovernanceWalletUpdate(address governanceWallet);\\n    event FeeCollectorUpdate(address feeCollector);\\n\\n    ExplicitLiquidVoting.Data private _defaultFee;\\n    ExplicitLiquidVoting.Data private _defaultSlippageFee;\\n    ExplicitLiquidVoting.Data private _defaultDecayPeriod;\\n    ExplicitLiquidVoting.Data private _referralShare;\\n    ExplicitLiquidVoting.Data private _governanceShare;\\n    address public override governanceWallet;\\n    address public override feeCollector;\\n\\n    mapping(address => bool) public override isFeeCollector;\\n\\n    constructor(address _mothership) public BaseGovernanceModule(_mothership) {\\n        _defaultFee.data.result = MooniswapConstants._DEFAULT_FEE.toUint104();\\n        _defaultSlippageFee.data.result = MooniswapConstants._DEFAULT_SLIPPAGE_FEE.toUint104();\\n        _defaultDecayPeriod.data.result = MooniswapConstants._DEFAULT_DECAY_PERIOD.toUint104();\\n        _referralShare.data.result = MooniswapConstants._DEFAULT_REFERRAL_SHARE.toUint104();\\n        _governanceShare.data.result = MooniswapConstants._DEFAULT_GOVERNANCE_SHARE.toUint104();\\n    }\\n\\n    function shutdown() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function isActive() external view override returns (bool) {\\n        return !paused();\\n    }\\n\\n    function shareParameters() external view override returns(uint256, uint256, address, address) {\\n        return (_referralShare.data.current(), _governanceShare.data.current(), governanceWallet, feeCollector);\\n    }\\n\\n    function defaults() external view override returns(uint256, uint256, uint256) {\\n        return (_defaultFee.data.current(), _defaultSlippageFee.data.current(), _defaultDecayPeriod.data.current());\\n    }\\n\\n    function defaultFee() external view override returns(uint256) {\\n        return _defaultFee.data.current();\\n    }\\n\\n    function defaultFeeVotes(address user) external view returns(uint256) {\\n        return _defaultFee.votes[user].get(MooniswapConstants._DEFAULT_FEE);\\n    }\\n\\n    function virtualDefaultFee() external view override returns(uint104, uint104, uint48) {\\n        return (_defaultFee.data.oldResult, _defaultFee.data.result, _defaultFee.data.time);\\n    }\\n\\n    function defaultSlippageFee() external view override returns(uint256) {\\n        return _defaultSlippageFee.data.current();\\n    }\\n\\n    function defaultSlippageFeeVotes(address user) external view returns(uint256) {\\n        return _defaultSlippageFee.votes[user].get(MooniswapConstants._DEFAULT_SLIPPAGE_FEE);\\n    }\\n\\n    function virtualDefaultSlippageFee() external view override returns(uint104, uint104, uint48) {\\n        return (_defaultSlippageFee.data.oldResult, _defaultSlippageFee.data.result, _defaultSlippageFee.data.time);\\n    }\\n\\n    function defaultDecayPeriod() external view override returns(uint256) {\\n        return _defaultDecayPeriod.data.current();\\n    }\\n\\n    function defaultDecayPeriodVotes(address user) external view returns(uint256) {\\n        return _defaultDecayPeriod.votes[user].get(MooniswapConstants._DEFAULT_DECAY_PERIOD);\\n    }\\n\\n    function virtualDefaultDecayPeriod() external view override returns(uint104, uint104, uint48) {\\n        return (_defaultDecayPeriod.data.oldResult, _defaultDecayPeriod.data.result, _defaultDecayPeriod.data.time);\\n    }\\n\\n    function referralShare() external view override returns(uint256) {\\n        return _referralShare.data.current();\\n    }\\n\\n    function referralShareVotes(address user) external view returns(uint256) {\\n        return _referralShare.votes[user].get(MooniswapConstants._DEFAULT_REFERRAL_SHARE);\\n    }\\n\\n    function virtualReferralShare() external view returns(uint104, uint104, uint48) {\\n        return (_referralShare.data.oldResult, _referralShare.data.result, _referralShare.data.time);\\n    }\\n\\n    function governanceShare() external view override returns(uint256) {\\n        return _governanceShare.data.current();\\n    }\\n\\n    function governanceShareVotes(address user) external view returns(uint256) {\\n        return _governanceShare.votes[user].get(MooniswapConstants._DEFAULT_GOVERNANCE_SHARE);\\n    }\\n\\n    function virtualGovernanceShare() external view returns(uint104, uint104, uint48) {\\n        return (_governanceShare.data.oldResult, _governanceShare.data.result, _governanceShare.data.time);\\n    }\\n\\n    function setGovernanceWallet(address newGovernanceWallet) external onlyOwner {\\n        governanceWallet = newGovernanceWallet;\\n        emit GovernanceWalletUpdate(newGovernanceWallet);\\n    }\\n\\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\\n        feeCollector = newFeeCollector;\\n        isFeeCollector[newFeeCollector] = true;\\n        emit FeeCollectorUpdate(newFeeCollector);\\n    }\\n\\n    function defaultFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n        _defaultFee.updateVote(msg.sender, _defaultFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_FEE, _emitDefaultFeeVoteUpdate);\\n    }\\n\\n    function discardDefaultFeeVote() external {\\n       _defaultFee.updateVote(msg.sender, _defaultFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_FEE, _emitDefaultFeeVoteUpdate);\\n    }\\n\\n    function defaultSlippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n        _defaultSlippageFee.updateVote(msg.sender, _defaultSlippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_SLIPPAGE_FEE, _emitDefaultSlippageFeeVoteUpdate);\\n    }\\n\\n   function discardDefaultSlippageFeeVote() external {\\n        _defaultSlippageFee.updateVote(msg.sender, _defaultSlippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_SLIPPAGE_FEE, _emitDefaultSlippageFeeVoteUpdate);\\n    }\\n\\n    function defaultDecayPeriodVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_DECAY_PERIOD, \\\"Decay period vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_DECAY_PERIOD, \\\"Decay period vote is too low\\\");\\n        _defaultDecayPeriod.updateVote(msg.sender, _defaultDecayPeriod.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_DECAY_PERIOD, _emitDefaultDecayPeriodVoteUpdate);\\n    }\\n\\n    function discardDefaultDecayPeriodVote() external {\\n        _defaultDecayPeriod.updateVote(msg.sender, _defaultDecayPeriod.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_DECAY_PERIOD, _emitDefaultDecayPeriodVoteUpdate);\\n    }\\n\\n    function referralShareVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SHARE, \\\"Referral share vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_REFERRAL_SHARE, \\\"Referral share vote is too low\\\");\\n        _referralShare.updateVote(msg.sender, _referralShare.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_REFERRAL_SHARE, _emitReferralShareVoteUpdate);\\n    }\\n\\n    function discardReferralShareVote() external {\\n        _referralShare.updateVote(msg.sender, _referralShare.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_REFERRAL_SHARE, _emitReferralShareVoteUpdate);\\n    }\\n\\n    function governanceShareVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SHARE, \\\"Gov share vote is too high\\\");\\n        _governanceShare.updateVote(msg.sender, _governanceShare.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), MooniswapConstants._DEFAULT_GOVERNANCE_SHARE, _emitGovernanceShareVoteUpdate);\\n    }\\n\\n    function discardGovernanceShareVote() external {\\n        _governanceShare.updateVote(msg.sender, _governanceShare.votes[msg.sender], Vote.init(), balanceOf(msg.sender), MooniswapConstants._DEFAULT_GOVERNANCE_SHARE, _emitGovernanceShareVoteUpdate);\\n    }\\n\\n    function _notifyStakeChanged(address account, uint256 newBalance) internal override {\\n        uint256 balance = _set(account, newBalance);\\n        if (newBalance == balance) {\\n            return;\\n        }\\n\\n        _defaultFee.updateBalance(account, _defaultFee.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_FEE, _emitDefaultFeeVoteUpdate);\\n        _defaultSlippageFee.updateBalance(account, _defaultSlippageFee.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_SLIPPAGE_FEE, _emitDefaultSlippageFeeVoteUpdate);\\n        _defaultDecayPeriod.updateBalance(account, _defaultDecayPeriod.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_DECAY_PERIOD, _emitDefaultDecayPeriodVoteUpdate);\\n        _referralShare.updateBalance(account, _referralShare.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_REFERRAL_SHARE, _emitReferralShareVoteUpdate);\\n        _governanceShare.updateBalance(account, _governanceShare.votes[account], balance, newBalance, MooniswapConstants._DEFAULT_GOVERNANCE_SHARE, _emitGovernanceShareVoteUpdate);\\n    }\\n\\n    function _emitDefaultFeeVoteUpdate(address user, uint256 newDefaultFee, bool isDefault, uint256 balance) private {\\n        emit DefaultFeeVoteUpdate(user, newDefaultFee, isDefault, balance);\\n    }\\n\\n    function _emitDefaultSlippageFeeVoteUpdate(address user, uint256 newDefaultSlippageFee, bool isDefault, uint256 balance) private {\\n        emit DefaultSlippageFeeVoteUpdate(user, newDefaultSlippageFee, isDefault, balance);\\n    }\\n\\n    function _emitDefaultDecayPeriodVoteUpdate(address user, uint256 newDefaultDecayPeriod, bool isDefault, uint256 balance) private {\\n        emit DefaultDecayPeriodVoteUpdate(user, newDefaultDecayPeriod, isDefault, balance);\\n    }\\n\\n    function _emitReferralShareVoteUpdate(address user, uint256 newReferralShare, bool isDefault, uint256 balance) private {\\n        emit ReferralShareVoteUpdate(user, newReferralShare, isDefault, balance);\\n    }\\n\\n    function _emitGovernanceShareVoteUpdate(address user, uint256 newGovernanceShare, bool isDefault, uint256 balance) private {\\n        emit GovernanceShareVoteUpdate(user, newGovernanceShare, isDefault, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x6f4977430b0198db3b7df9b9f0a11c16bc111a4e341a5ad606d07c0586a2ffa1\",\"license\":\"MIT\"},\"contracts/governance/MooniswapGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IMooniswapFactoryGovernance.sol\\\";\\nimport \\\"../libraries/LiquidVoting.sol\\\";\\nimport \\\"../libraries/MooniswapConstants.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nabstract contract MooniswapGovernance is ERC20, Ownable, ReentrancyGuard {\\n    using Vote for Vote.Data;\\n    using LiquidVoting for LiquidVoting.Data;\\n    using VirtualVote for VirtualVote.Data;\\n    using SafeCast for uint256;\\n\\n    event FeeVoteUpdate(address indexed user, uint256 fee, bool isDefault, uint256 amount);\\n    event SlippageFeeVoteUpdate(address indexed user, uint256 slippageFee, bool isDefault, uint256 amount);\\n    event DecayPeriodVoteUpdate(address indexed user, uint256 decayPeriod, bool isDefault, uint256 amount);\\n\\n    IMooniswapFactoryGovernance public mooniswapFactoryGovernance;\\n    LiquidVoting.Data private _fee;\\n    LiquidVoting.Data private _slippageFee;\\n    LiquidVoting.Data private _decayPeriod;\\n\\n    constructor(IMooniswapFactoryGovernance _mooniswapFactoryGovernance) internal {\\n        mooniswapFactoryGovernance = _mooniswapFactoryGovernance;\\n        _fee.data.result = _mooniswapFactoryGovernance.defaultFee().toUint104();\\n        _slippageFee.data.result = _mooniswapFactoryGovernance.defaultSlippageFee().toUint104();\\n        _decayPeriod.data.result = _mooniswapFactoryGovernance.defaultDecayPeriod().toUint104();\\n    }\\n\\n    function setMooniswapFactoryGovernance(IMooniswapFactoryGovernance newMooniswapFactoryGovernance) external onlyOwner {\\n        mooniswapFactoryGovernance = newMooniswapFactoryGovernance;\\n        this.discardFeeVote();\\n        this.discardSlippageFeeVote();\\n        this.discardDecayPeriodVote();\\n    }\\n\\n    function fee() public view returns(uint256) {\\n        return _fee.data.current();\\n    }\\n\\n    function slippageFee() public view returns(uint256) {\\n        return _slippageFee.data.current();\\n    }\\n\\n    function decayPeriod() public view returns(uint256) {\\n        return _decayPeriod.data.current();\\n    }\\n\\n    function virtualFee() external view returns(uint104, uint104, uint48) {\\n        return (_fee.data.oldResult, _fee.data.result, _fee.data.time);\\n    }\\n\\n    function virtualSlippageFee() external view returns(uint104, uint104, uint48) {\\n        return (_slippageFee.data.oldResult, _slippageFee.data.result, _slippageFee.data.time);\\n    }\\n\\n    function virtualDecayPeriod() external view returns(uint104, uint104, uint48) {\\n        return (_decayPeriod.data.oldResult, _decayPeriod.data.result, _decayPeriod.data.time);\\n    }\\n\\n    function feeVotes(address user) external view returns(uint256) {\\n        return _fee.votes[user].get(mooniswapFactoryGovernance.defaultFee);\\n    }\\n\\n    function slippageFeeVotes(address user) external view returns(uint256) {\\n        return _slippageFee.votes[user].get(mooniswapFactoryGovernance.defaultSlippageFee);\\n    }\\n\\n    function decayPeriodVotes(address user) external view returns(uint256) {\\n        return _decayPeriod.votes[user].get(mooniswapFactoryGovernance.defaultDecayPeriod);\\n    }\\n\\n    function feeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_FEE, \\\"Fee vote is too high\\\");\\n\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function slippageFeeVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_SLIPPAGE_FEE, \\\"Slippage fee vote is too high\\\");\\n\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function decayPeriodVote(uint256 vote) external {\\n        require(vote <= MooniswapConstants._MAX_DECAY_PERIOD, \\\"Decay period vote is too high\\\");\\n        require(vote >= MooniswapConstants._MIN_DECAY_PERIOD, \\\"Decay period vote is too low\\\");\\n\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(vote), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n    }\\n\\n    function discardFeeVote() external {\\n        _fee.updateVote(msg.sender, _fee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultFee(), _emitFeeVoteUpdate);\\n    }\\n\\n    function discardSlippageFeeVote() external {\\n        _slippageFee.updateVote(msg.sender, _slippageFee.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultSlippageFee(), _emitSlippageFeeVoteUpdate);\\n    }\\n\\n    function discardDecayPeriodVote() external {\\n        _decayPeriod.updateVote(msg.sender, _decayPeriod.votes[msg.sender], Vote.init(), balanceOf(msg.sender), totalSupply(), mooniswapFactoryGovernance.defaultDecayPeriod(), _emitDecayPeriodVoteUpdate);\\n    }\\n\\n    function _emitFeeVoteUpdate(address account, uint256 newFee, bool isDefault, uint256 newBalance) private {\\n        emit FeeVoteUpdate(account, newFee, isDefault, newBalance);\\n    }\\n\\n    function _emitSlippageFeeVoteUpdate(address account, uint256 newSlippageFee, bool isDefault, uint256 newBalance) private {\\n        emit SlippageFeeVoteUpdate(account, newSlippageFee, isDefault, newBalance);\\n    }\\n\\n    function _emitDecayPeriodVoteUpdate(address account, uint256 newDecayPeriod, bool isDefault, uint256 newBalance) private {\\n        emit DecayPeriodVoteUpdate(account, newDecayPeriod, isDefault, newBalance);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from == to) {\\n            // ignore transfers to self\\n            return;\\n        }\\n\\n        IMooniswapFactoryGovernance _mooniswapFactoryGovernance = mooniswapFactoryGovernance;\\n        bool updateFrom = !(from == address(0) || _mooniswapFactoryGovernance.isFeeCollector(from));\\n        bool updateTo = !(to == address(0) || _mooniswapFactoryGovernance.isFeeCollector(to));\\n\\n        if (!updateFrom && !updateTo) {\\n            // mint to feeReceiver or burn from feeReceiver\\n            return;\\n        }\\n\\n        uint256 balanceFrom = (from != address(0)) ? balanceOf(from) : 0;\\n        uint256 balanceTo = (to != address(0)) ? balanceOf(to) : 0;\\n        uint256 newTotalSupply = totalSupply()\\n            .add(from == address(0) ? amount : 0)\\n            .sub(to == address(0) ? amount : 0);\\n\\n        ParamsHelper memory params = ParamsHelper({\\n            from: from,\\n            to: to,\\n            updateFrom: updateFrom,\\n            updateTo: updateTo,\\n            amount: amount,\\n            balanceFrom: balanceFrom,\\n            balanceTo: balanceTo,\\n            newTotalSupply: newTotalSupply\\n        });\\n\\n        (uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod) = _mooniswapFactoryGovernance.defaults();\\n\\n        _updateOnTransfer(params, defaultFee, _emitFeeVoteUpdate, _fee);\\n        _updateOnTransfer(params, defaultSlippageFee, _emitSlippageFeeVoteUpdate, _slippageFee);\\n        _updateOnTransfer(params, defaultDecayPeriod, _emitDecayPeriodVoteUpdate, _decayPeriod);\\n    }\\n\\n    struct ParamsHelper {\\n        address from;\\n        address to;\\n        bool updateFrom;\\n        bool updateTo;\\n        uint256 amount;\\n        uint256 balanceFrom;\\n        uint256 balanceTo;\\n        uint256 newTotalSupply;\\n    }\\n\\n    function _updateOnTransfer(\\n        ParamsHelper memory params,\\n        uint256 defaultValue,\\n        function(address, uint256, bool, uint256) internal emitEvent,\\n        LiquidVoting.Data storage votingData\\n    ) private {\\n        Vote.Data memory voteFrom = votingData.votes[params.from];\\n        Vote.Data memory voteTo = votingData.votes[params.to];\\n\\n        if (voteFrom.isDefault() && voteTo.isDefault() && params.updateFrom && params.updateTo) {\\n            emitEvent(params.from, voteFrom.get(defaultValue), true, params.balanceFrom.sub(params.amount));\\n            emitEvent(params.to, voteTo.get(defaultValue), true, params.balanceTo.add(params.amount));\\n            return;\\n        }\\n\\n        if (params.updateFrom) {\\n            votingData.updateBalance(params.from, voteFrom, params.balanceFrom, params.balanceFrom.sub(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n\\n        if (params.updateTo) {\\n            votingData.updateBalance(params.to, voteTo, params.balanceTo, params.balanceTo.add(params.amount), params.newTotalSupply, defaultValue, emitEvent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62430fc9ad87ad51c5820482201ad5f6df47c838e8b9e50a5207eb9dbe7cc12e\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x32a215750177362f8077d6e4cf48ae508e0b6565f20f8eaa4b130260bf238555\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IGovernanceModule {\\n    function notifyStakeChanged(address account, uint256 newBalance) external;\\n    function notifyStakesChanged(address[] calldata accounts, uint256[] calldata newBalances) external;\\n}\\n\",\"keccak256\":\"0x4d536ea796fbb6f9a0527690d38bb3c125ea604b72496e91c9bc0c14b152aa8f\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapDeployer {\\n    function deploy(\\n        IERC20 token1,\\n        IERC20 token2,\\n        string calldata name,\\n        string calldata symbol,\\n        address poolOwner\\n    ) external returns(Mooniswap pool);\\n}\\n\",\"keccak256\":\"0x58302e42d466a5c0cd240c840f3caad7c54e10a01a7c1c2ff815a551288c9776\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../Mooniswap.sol\\\";\\n\\ninterface IMooniswapFactory is IMooniswapFactoryGovernance {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (Mooniswap);\\n    function isPool(Mooniswap mooniswap) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xee7b8aa36fc3d066d8c1413b06f09932eb72e9d608f5ce8b303a9cafc049fcab\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactoryGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\ninterface IMooniswapFactoryGovernance {\\n    function shareParameters() external view returns(uint256 referralShare, uint256 governanceShare, address governanceWallet, address referralFeeReceiver);\\n    function defaults() external view returns(uint256 defaultFee, uint256 defaultSlippageFee, uint256 defaultDecayPeriod);\\n\\n    function defaultFee() external view returns(uint256);\\n    function defaultSlippageFee() external view returns(uint256);\\n    function defaultDecayPeriod() external view returns(uint256);\\n\\n    function virtualDefaultFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultSlippageFee() external view returns(uint104, uint104, uint48);\\n    function virtualDefaultDecayPeriod() external view returns(uint104, uint104, uint48);\\n\\n    function referralShare() external view returns(uint256);\\n    function governanceShare() external view returns(uint256);\\n    function governanceWallet() external view returns(address);\\n    function feeCollector() external view returns(address);\\n\\n    function isFeeCollector(address) external view returns(bool);\\n    function isActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x86fd2d21dcd3c4b28d17a65f6eba549c252e5b14a22d447c4ff5c8006a3c63e8\",\"license\":\"MIT\"},\"contracts/libraries/ExplicitLiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary ExplicitLiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _votedSupply;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        ExplicitLiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        ExplicitLiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        ExplicitLiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldVotedSupply = self._votedSupply;\\n        uint256 newVotedSupply = oldVotedSupply;\\n\\n        if (!oldVote.isDefault()) {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n            newVotedSupply = newVotedSupply.sub(oldBalance);\\n        }\\n\\n        if (!newVote.isDefault()) {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n            newVotedSupply = newVotedSupply.add(newBalance);\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newVotedSupply != oldVotedSupply) {\\n            self._votedSupply = newVotedSupply;\\n        }\\n\\n        {\\n            uint256 newResult = newVotedSupply == 0 ? defaultVote : newWeightedSum.div(newVotedSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x04ff043a03b46bf31df946e05e9497f593ab5531ab81d73ef338ad7211088331\",\"license\":\"MIT\"},\"contracts/libraries/LiquidVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./VirtualVote.sol\\\";\\nimport \\\"./Vote.sol\\\";\\n\\n\\nlibrary LiquidVoting {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using Vote for Vote.Data;\\n    using VirtualVote for VirtualVote.Data;\\n\\n    struct Data {\\n        VirtualVote.Data data;\\n        uint256 _weightedSum;\\n        uint256 _defaultVotes;\\n        mapping(address => Vote.Data) votes;\\n    }\\n\\n    function updateVote(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 balance,\\n        uint256 totalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newVote, balance, balance, totalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function updateBalance(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) internal {\\n        return _update(self, user, oldVote, newBalance == 0 ? Vote.init() : oldVote, oldBalance, newBalance, newTotalSupply, defaultVote, emitEvent);\\n    }\\n\\n    function _update(\\n        LiquidVoting.Data storage self,\\n        address user,\\n        Vote.Data memory oldVote,\\n        Vote.Data memory newVote,\\n        uint256 oldBalance,\\n        uint256 newBalance,\\n        uint256 newTotalSupply,\\n        uint256 defaultVote,\\n        function(address, uint256, bool, uint256) emitEvent\\n    ) private {\\n        uint256 oldWeightedSum = self._weightedSum;\\n        uint256 newWeightedSum = oldWeightedSum;\\n        uint256 oldDefaultVotes = self._defaultVotes;\\n        uint256 newDefaultVotes = oldDefaultVotes;\\n\\n        if (oldVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.sub(oldBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));\\n        }\\n\\n        if (newVote.isDefault()) {\\n            newDefaultVotes = newDefaultVotes.add(newBalance);\\n        } else {\\n            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));\\n        }\\n\\n        if (newWeightedSum != oldWeightedSum) {\\n            self._weightedSum = newWeightedSum;\\n        }\\n\\n        if (newDefaultVotes != oldDefaultVotes) {\\n            self._defaultVotes = newDefaultVotes;\\n        }\\n\\n        {\\n            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).div(newTotalSupply);\\n            VirtualVote.Data memory data = self.data;\\n\\n            if (newResult != data.result) {\\n                VirtualVote.Data storage sdata = self.data;\\n                (sdata.oldResult, sdata.result, sdata.time) = (\\n                    data.current().toUint104(),\\n                    newResult.toUint104(),\\n                    block.timestamp.toUint48()\\n                );\\n            }\\n        }\\n\\n        if (!newVote.eq(oldVote)) {\\n            self.votes[user] = newVote;\\n        }\\n\\n        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x0300c61b4bba9a58097ec0a843d04b42260f705dbc68bf3bbcc9e9011ffdfd7a\",\"license\":\"MIT\"},\"contracts/libraries/MooniswapConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary MooniswapConstants {\\n    uint256 internal constant _FEE_DENOMINATOR = 1e18;\\n\\n    uint256 internal constant _MIN_REFERRAL_SHARE = 0.05e18; // 5%\\n    uint256 internal constant _MIN_DECAY_PERIOD = 1 minutes;\\n\\n    uint256 internal constant _MAX_FEE = 0.01e18; // 1%\\n    uint256 internal constant _MAX_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _MAX_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _MAX_DECAY_PERIOD = 5 minutes;\\n\\n    uint256 internal constant _DEFAULT_FEE = 0;\\n    uint256 internal constant _DEFAULT_SLIPPAGE_FEE = 1e18;  // 100%\\n    uint256 internal constant _DEFAULT_REFERRAL_SHARE = 0.1e18; // 10%\\n    uint256 internal constant _DEFAULT_GOVERNANCE_SHARE = 0;\\n    uint256 internal constant _DEFAULT_DECAY_PERIOD = 1 minutes;\\n}\\n\",\"keccak256\":\"0x9f6421e5cf8734fbf5670148f3d6030b69aaeba473933f9a07fd3766fdaf1733\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary SafeCast {\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value < 2**216, \\\"value does not fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value < 2**104, \\\"value does not fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value < 2**48, \\\"value does not fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value < 2**40, \\\"value does not fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n}\\n\",\"keccak256\":\"0x6f5e3e3d0bc762c2defe32c7bc62309cd7e60776bb5dc0d059a1bcf0874b4c51\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary Sqrt {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256) {\\n        if (y > 3) {\\n            uint256 z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n            return z;\\n        } else if (y != 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5674ed7d1bb3655d9d6698ff6175cb23261d8cf837915d0af70404aa019b5267\",\"license\":\"MIT\"},\"contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n\\nlibrary UniERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(0));\\n    }\\n\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                to.transfer(amount);\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    function uniTransferFrom(IERC20 token, address payable from, address to, uint256 amount) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                require(msg.value >= amount, \\\"UniERC20: not enough value\\\");\\n                require(from == msg.sender, \\\"from is not msg.sender\\\");\\n                require(to == address(this), \\\"to is not this\\\");\\n                if (msg.value > amount) {\\n                    // Return remainder if exist\\n                    from.transfer(msg.value.sub(amount));\\n                }\\n            } else {\\n                token.safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    function uniSymbol(IERC20 token) internal view returns(string memory) {\\n        if (isETH(token)) {\\n            return \\\"ETH\\\";\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\\n            abi.encodeWithSignature(\\\"symbol()\\\")\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{ gas: 20000 }(\\n                abi.encodeWithSignature(\\\"SYMBOL()\\\")\\n            );\\n        }\\n\\n        if (success && data.length >= 96) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            if (offset == 0x20 && len > 0 && len <= 256) {\\n                return string(abi.decode(data, (bytes)));\\n            }\\n        }\\n\\n        if (success && data.length == 32) {\\n            uint len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                len++;\\n            }\\n\\n            if (len > 0) {\\n                bytes memory result = new bytes(len);\\n                for (uint i = 0; i < len; i++) {\\n                    result[i] = data[i];\\n                }\\n                return string(result);\\n            }\\n        }\\n\\n        return _toHex(address(token));\\n    }\\n\\n    function _toHex(address account) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(account));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        uint j = 2;\\n        for (uint i = 0; i < data.length; i++) {\\n            uint a = uint8(data[i]) >> 4;\\n            uint b = uint8(data[i]) & 0x0f;\\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\\n        }\\n\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x0edbb831cddd42ae71b178230188bd12c8f1cd362b148df704df6f0b1c9e015f\",\"license\":\"MIT\"},\"contracts/libraries/VirtualBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\n\\nlibrary VirtualBalance {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    struct Data {\\n        uint216 balance;\\n        uint40 time;\\n    }\\n\\n    function set(VirtualBalance.Data storage self, uint256 balance) internal {\\n        (self.balance, self.time) = (\\n            balance.toUint216(),\\n            block.timestamp.toUint40()\\n        );\\n    }\\n\\n    function update(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance) internal {\\n        set(self, current(self, decayPeriod, realBalance));\\n    }\\n\\n    function scale(VirtualBalance.Data storage self, uint256 decayPeriod, uint256 realBalance, uint256 num, uint256 denom) internal {\\n        set(self, current(self, decayPeriod, realBalance).mul(num).add(denom.sub(1)).div(denom));\\n    }\\n\\n    function current(VirtualBalance.Data memory self, uint256 decayPeriod, uint256 realBalance) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(decayPeriod, block.timestamp.sub(self.time));\\n        uint256 timeRemain = decayPeriod.sub(timePassed);\\n        return uint256(self.balance).mul(timeRemain).add(\\n            realBalance.mul(timePassed)\\n        ).div(decayPeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x0493d4b88ca464df713e7978a995c26f378e458ffeffc4a0ca966510e4cea8cb\",\"license\":\"MIT\"},\"contracts/libraries/VirtualVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary VirtualVote {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant _VOTE_DECAY_PERIOD = 1 days;\\n\\n    struct Data {\\n        uint104 oldResult;\\n        uint104 result;\\n        uint48 time;\\n    }\\n\\n    function current(VirtualVote.Data memory self) internal view returns(uint256) {\\n        uint256 timePassed = Math.min(_VOTE_DECAY_PERIOD, block.timestamp.sub(self.time));\\n        uint256 timeRemain = _VOTE_DECAY_PERIOD.sub(timePassed);\\n        return uint256(self.oldResult).mul(timeRemain).add(\\n            uint256(self.result).mul(timePassed)\\n        ).div(_VOTE_DECAY_PERIOD);\\n    }\\n}\\n\",\"keccak256\":\"0xd62c910eb9b206eb6c2230be6c964824693fbe52436e53c3e69f02a84aa7c63d\",\"license\":\"MIT\"},\"contracts/libraries/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\nlibrary Vote {\\n    struct Data {\\n        uint256 value;\\n    }\\n\\n    function eq(Vote.Data memory self, Vote.Data memory vote) internal pure returns(bool) {\\n        return self.value == vote.value;\\n    }\\n\\n    function init() internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: 0\\n        });\\n    }\\n\\n    function init(uint256 vote) internal pure returns(Vote.Data memory data) {\\n        return Vote.Data({\\n            value: vote + 1\\n        });\\n    }\\n\\n    function isDefault(Data memory self) internal pure returns(bool) {\\n        return self.value == 0;\\n    }\\n\\n    function get(Data memory self, uint256 defaultVote) internal pure returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVote;\\n    }\\n\\n    function get(Data memory self, function() external view returns(uint256) defaultVoteFn) internal view returns(uint256) {\\n        if (self.value > 0) {\\n            return self.value - 1;\\n        }\\n        return defaultVoteFn();\\n    }\\n}\\n\",\"keccak256\":\"0xa31a88aebf9a52ea8c02e611cd798631e7296b78e9ecdf37d2b0c7eb2badb252\",\"license\":\"MIT\"},\"contracts/utils/BalanceAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract BalanceAccounting {\\n    using SafeMath for uint256;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] = _balances[account].sub(amount, \\\"Burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n    }\\n\\n    function _set(address account, uint256 amount) internal virtual returns(uint256 oldAmount) {\\n        oldAmount = _balances[account];\\n        if (oldAmount != amount) {\\n            _balances[account] = amount;\\n            _totalSupply = _totalSupply.add(amount).sub(oldAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ae3cf0992b5e6d9eea9f5b1d1feec7d87ea2caecc493acf5dcedb3fe5034d48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200343f3803806200343f833981810160405260608110156200003757600080fd5b50805160208201516040909201516001600160601b0319606082901b166080529091908060006200006762000240565b600280546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506002805460ff60a01b19169055620000da600062000244602090811b6200202917901c565b6003600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000124670de0b6b3a76400006200024460201b620020291760201c565b6007600001600001600d6101000a8154816001600160681b0302191690836001600160681b0316021790555062000167603c6200024460201b620020291760201c565b600b600001600001600d6101000a8154816001600160681b0302191690836001600160681b03160217905550620001b167016345785d8a00006200024460201b620020291760201c565b600f600001600001600d6101000a8154816001600160681b0302191690836001600160681b03160217905550620001f460006200024460201b620020291760201c565b601380546001600160681b0392909216600160681b02600160681b600160d01b031990921691909117905550506001600160601b0319606092831b811660c052911b1660a052620002a3565b3390565b6000600160681b82106200029f576040805162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015290519081900360640190fd5b5090565b60805160601c60a05160601c60c05160601c613152620002ed600039806111cf5280611afb525080610fa25280611a9c525080610c2b5280610e01528061198352506131526000f3fe608060405234801561001057600080fd5b50600436106103415760003560e01c8063715018a6116101bd578063c415b95c116100f9578063e9f7e17b116100a2578063f2fde38b1161007c578063f2fde38b146108dc578063f383033514610902578063fb20b7d01461090a578063fc0e74d11461093057610341565b8063e9f7e17b14610891578063edb7a6fa146108ae578063ef54244b146108d457610341565b8063d8f4e0eb116100d3578063d8f4e0eb14610864578063e7a7b5a014610881578063e859e56c1461088957610341565b8063c415b95c146107fc578063cf0b227014610804578063d88ff1f41461080c57610341565b8063901754d711610166578063a42dce8011610140578063a42dce8014610704578063ad3333481461072a578063b0cb4b0a146107ec578063b8ffca32146107f457610341565b8063901754d7146106935780639725ff35146106c157806399fca7d9146106de57610341565b8063865e457311610197578063865e45731461065d5780638d424127146106835780638da5cb5b1461068b57610341565b8063715018a6146106275780637c4423a81461062f578063855559341461065557610341565b80633b90b9bf1161028c5780635a6c72d011610235578063607c219f1161020f578063607c219f146105cb578063612a9f76146105f157806370989330146105f957806370a082311461060157610341565b80635a6c72d0146105955780635b16ebb71461059d5780635c975abb146105c357610341565b806341d1de971161026657806341d1de97146104ed578063544caa561461050a578063545e7c611461056757610341565b80633b90b9bf1461049b5780633eed75c3146104c15780634187b7d6146104c957610341565b80631845f0db116102ee57806323662bb9116102c857806323662bb91461044a57806327a27433146104525780632ba653ec1461047e57610341565b80631845f0db1461041e57806322abd7b21461042657806322f3e2d41461042e57610341565b8063172886e71161031f578063172886e7146103a557806317901de3146103dc57806318160ddd1461041657610341565b8063117036d11461034657806314fd235a1461037e578063151359b41461039d575b600080fd5b61036c6004803603602081101561035c57600080fd5b50356001600160a01b0316610938565b60408051918252519081900360200190f35b61039b6004803603602081101561039457600080fd5b5035610978565b005b61039b610a1e565b6103ad610a65565b6040805194855260208501939093526001600160a01b0391821684840152166060830152519081900360800190f35b6103e4610b1b565b604080516001600160681b03948516815292909316602083015265ffffffffffff168183015290519081900360600190f35b61036c610b47565b61036c610b4d565b6103e4610b9b565b610436610bc7565b604080519115158252519081900360200190f35b61036c610bd7565b61039b6004803603604081101561046857600080fd5b506001600160a01b038135169060200135610c20565b61039b6004803603602081101561049457600080fd5b5035610cab565b610436600480360360208110156104b157600080fd5b50356001600160a01b0316610d9e565b61039b610db3565b6104d1610dff565b604080516001600160a01b039092168252519081900360200190f35b6104d16004803603602081101561050357600080fd5b5035610e23565b6105386004803603604081101561052057600080fd5b506001600160a01b0381358116916020013516610e4a565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b6104d16004803603604081101561057d57600080fd5b506001600160a01b0381358116916020013516610e7e565b61036c61140c565b610436600480360360208110156105b357600080fd5b50356001600160a01b0316611455565b61043661146a565b61039b600480360360208110156105e157600080fd5b50356001600160a01b031661147a565b61039b611542565b6104d161156e565b61036c6004803603602081101561061757600080fd5b50356001600160a01b031661157d565b61039b611598565b61036c6004803603602081101561064557600080fd5b50356001600160a01b0316611656565b61039b611687565b61036c6004803603602081101561067357600080fd5b50356001600160a01b03166116b3565b61039b6116e3565b6104d161172f565b6104d1600480360360408110156106a957600080fd5b506001600160a01b038135811691602001351661173e565b61039b600480360360208110156106d757600080fd5b503561177f565b61036c600480360360208110156106f457600080fd5b50356001600160a01b0316611865565b61039b6004803603602081101561071a57600080fd5b50356001600160a01b0316611895565b61039b6004803603604081101561074057600080fd5b81019060208101813564010000000081111561075b57600080fd5b82018360208201111561076d57600080fd5b8035906020019184602083028401116401000000008311171561078f57600080fd5b9193909290916020810190356401000000008111156107ad57600080fd5b8201836020820111156107bf57600080fd5b803590602001918460208302840111640100000000831117156107e157600080fd5b509092509050611978565b6104d1611a9a565b6103e4611abe565b6104d1611aea565b6104d1611af9565b610814611b1d565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610850578181015183820152602001610838565b505050509050019250505060405180910390f35b61039b6004803603602081101561087a57600080fd5b5035611b7f565b6103e4611c08565b61036c611c34565b61039b600480360360208110156108a757600080fd5b5035611c7d565b6108b6611d07565b60408051938452602084019290925282820152519081900360600190f35b6103e4611deb565b61039b600480360360208110156108f257600080fd5b50356001600160a01b0316611e17565b61036c611f2c565b61036c6004803603602081101561092057600080fd5b50356001600160a01b0316611f75565b61039b611fad565b6001600160a01b038116600090815260126020908152604080832081519283019091525481526109709067016345785d8a0000612087565b90505b919050565b67016345785d8a00008111156109d5576040805162461bcd60e51b815260206004820152601a60248201527f476f7620736861726520766f746520697320746f6f2068696768000000000000604482015290519081900360640190fd5b33600081815260166020908152604091829020825191820190925290548152610a1b9190610a02846120a3565b610a0b3361157d565b60139392919060006120c2612115565b50565b33600081815260066020908152604091829020825191820190925290548152610a639190610a4a61212e565b610a533361157d565b6003939291906000612149612115565b565b60408051606081018252600f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090819081908190610ab49061219c565b604080516060810182526013546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152610afa9061219c565b60175460185492979196506001600160a01b03908116955090911692509050565b600f546001600160681b0380821692600160681b830490911691600160d01b900465ffffffffffff1690565b60005490565b60408051606081018252600b546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610b969061219c565b905090565b6013546001600160681b0380821692600160681b830490911691600160d01b900465ffffffffffff1690565b6000610bd161146a565b15905090565b604080516060810182526007546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610b969061219c565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c9d576040805162461bcd60e51b815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f746865727368697000604482015290519081900360640190fd5b610ca78282612230565b5050565b61012c811115610d02576040805162461bcd60e51b815260206004820152601d60248201527f446563617920706572696f6420766f746520697320746f6f2068696768000000604482015290519081900360640190fd5b603c811015610d58576040805162461bcd60e51b815260206004820152601c60248201527f446563617920706572696f6420766f746520697320746f6f206c6f7700000000604482015290519081900360640190fd5b336000818152600e6020908152604091829020825191820190925290548152610a1b9190610d85846120a3565b610d8e3361157d565b600b93929190603c61238c612115565b60196020526000908152604090205460ff1681565b33600081815260126020908152604091829020825191820190925290548152610a639190610ddf61212e565b610de83361157d565b600f9392919067016345785d8a00006123df612115565b7f000000000000000000000000000000000000000000000000000000000000000081565b601a8181548110610e3057fe5b6000918252602090912001546001600160a01b0316905081565b600080826001600160a01b0316846001600160a01b03161015610e71575082905081610e77565b50819050825b9250929050565b6000816001600160a01b0316836001600160a01b03161415610ee7576040805162461bcd60e51b815260206004820181905260248201527f466163746f72793a206e6f7420737570706f72742073616d6520746f6b656e73604482015290519081900360640190fd5b600080610ef48585610e4a565b6001600160a01b038083166000908152601c6020908152604080832084861684529091529020549294509092501615610f74576040805162461bcd60e51b815260206004820152601c60248201527f466163746f72793a20706f6f6c20616c72656164792065786973747300000000604482015290519081900360640190fd5b6060610f88836001600160a01b0316612432565b90506060610f9e836001600160a01b0316612432565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b92440b08585858560405160200180807f31696e6368204c697175696469747920506f6f6c20280000000000000000000081525060160183805190602001908083835b6020831061102d5780518252601f19909201916020918201910161100e565b6001836020036101000a03801982511681845116808217855250505050505090500180602d60f81b81525060010182805190602001908083835b602083106110865780518252601f199092019160209182019101611067565b6001836020036101000a038019825116818451168082178552505050505050905001807f290000000000000000000000000000000000000000000000000000000000000081525060010192505050604051602081830303815290604052868660405160200180807f314c502d0000000000000000000000000000000000000000000000000000000081525060040183805190602001908083835b6020831061113f5780518252601f199092019160209182019101611120565b6001836020036101000a03801982511681845116808217855250505050505090500180602d60f81b81525060010182805190602001908083835b602083106111985780518252601f199092019160209182019101611179565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040527f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b031681526020018060200180602001846001600160a01b03168152602001838103835286818151815260200191508051906020019080838360005b8381101561126b578181015183820152602001611253565b50505050905090810190601f1680156112985780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156112cb5781810151838201526020016112b3565b50505050905090810190601f1680156112f85780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b505050506040513d602081101561134657600080fd5b50516001600160a01b038086166000818152601c6020908152604080832089861680855290835281842080549688166001600160a01b03199788168117909155601a805460018181019092557f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0180549098168217909755808552601b909352818420805460ff19169096179095555194995092939192917fc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b81780829190a45050505092915050565b604080516060810182526003546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610b969061219c565b601b6020526000908152604090205460ff1681565b600254600160a01b900460ff1690565b61148261290d565b6001600160a01b031661149361172f565b6001600160a01b0316146114ee576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b601780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fe348b7d1d8572de16c7301317890112a52bd7f6c3b713bd7d70e4cffb489ed9f9181900360200190a150565b33600081815260166020908152604091829020825191820190925290548152610a639190610a0261212e565b6017546001600160a01b031681565b6001600160a01b031660009081526001602052604090205490565b6115a061290d565b6001600160a01b03166115b161172f565b6001600160a01b03161461160c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6002546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600280546001600160a01b0319169055565b6001600160a01b0381166000908152600e60209081526040808320815192830190915254815261097090603c612087565b336000818152600e6020908152604091829020825191820190925290548152610a639190610d8561212e565b6001600160a01b038116600090815260166020908152604080832081519283019091525481526109709082612087565b336000818152600a6020908152604091829020825191820190925290548152610a63919061170f61212e565b6117183361157d565b600793929190670de0b6b3a7640000612911612115565b6002546001600160a01b031690565b600080600061174d8585610e4a565b6001600160a01b039182166000908152601c602090815260408083209385168352929052205416925050505b92915050565b67016345785d8a00008111156117dc576040805162461bcd60e51b815260206004820152601f60248201527f526566657272616c20736861726520766f746520697320746f6f206869676800604482015290519081900360640190fd5b66b1a2bc2ec50000811015611838576040805162461bcd60e51b815260206004820152601e60248201527f526566657272616c20736861726520766f746520697320746f6f206c6f770000604482015290519081900360640190fd5b33600081815260126020908152604091829020825191820190925290548152610a1b9190610ddf846120a3565b6001600160a01b038116600090815260066020908152604080832081519283019091525481526109709082612087565b61189d61290d565b6001600160a01b03166118ae61172f565b6001600160a01b031614611909576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b038316908117909155600081815260196020908152604091829020805460ff19166001179055815192835290517ffa7dc4914c53d1cee4cf31f857b016d55f8c6d28d5f950e64c7258a4fa18de199281900390910190a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119f5576040805162461bcd60e51b815260206004820152601f60248201527f416363657373207265737472696374656420746f206d6f746865727368697000604482015290519081900360640190fd5b828114611a49576040805162461bcd60e51b815260206004820152601d60248201527f417272617973206c656e6774682073686f756c6420626520657175616c000000604482015290519081900360640190fd5b60005b83811015611a9357611a8b858583818110611a6357fe5b905060200201356001600160a01b0316848484818110611a7f57fe5b90506020020135612230565b600101611a4c565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6007546001600160681b0380821692600160681b830490911691600160d01b900465ffffffffffff1690565b6018546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060601a805480602002602001604051908101604052809291908181526020018280548015611b7557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b57575b5050505050905090565b662386f26fc10000811115611bdb576040805162461bcd60e51b815260206004820152601460248201527f46656520766f746520697320746f6f2068696768000000000000000000000000604482015290519081900360640190fd5b33600081815260066020908152604091829020825191820190925290548152610a1b9190610a4a846120a3565b6003546001600160681b0380821692600160681b830490911691600160d01b900465ffffffffffff1690565b60408051606081018252600f546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610b969061219c565b670de0b6b3a7640000811115611cda576040805162461bcd60e51b815260206004820152601d60248201527f536c6970706167652066656520766f746520697320746f6f2068696768000000604482015290519081900360640190fd5b336000818152600a6020908152604091829020825191820190925290548152610a1b919061170f846120a3565b604080516060810182526003546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff169181019190915260009081908190611d549061219c565b604080516060810182526007546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152611d9a9061219c565b60408051606081018252600b546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152611de09061219c565b925092509250909192565b600b546001600160681b0380821692600160681b830490911691600160d01b900465ffffffffffff1690565b611e1f61290d565b6001600160a01b0316611e3061172f565b6001600160a01b031614611e8b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611ed05760405162461bcd60e51b81526004018080602001828103825260268152602001806130d66026913960400191505060405180910390fd5b6002546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b604080516060810182526013546001600160681b038082168352600160681b8204166020830152600160d01b900465ffffffffffff1691810191909152600090610b969061219c565b6001600160a01b0381166000908152600a60209081526040808320815192830190915254815261097090670de0b6b3a7640000612087565b611fb561290d565b6001600160a01b0316611fc661172f565b6001600160a01b031614612021576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610a63612964565b6000600160681b8210612083576040805162461bcd60e51b815260206004820152601e60248201527f76616c756520646f6573206e6f742066697420696e2031303420626974730000604482015290519081900360640190fd5b5090565b81516000901561209d5750815160001901611779565b50919050565b6120ab6130a2565b506040805160208101909152600182018152919050565b60408051848152831515602082015280820183905290516001600160a01b038616917f02540a8a88261967ef1c1a4ed50fde9f0a0a493922c069129e21961198e1b439919081900360600190a250505050565b6121258787878787888888612a32565b50505050505050565b6121366130a2565b5060408051602081019091526000815290565b60408051848152831515602082015280820183905290516001600160a01b038616917f28eed64d01e23014333abef902958309592b3cf9ce9da390f224467cfcaaf5b2919081900360600190a250505050565b6000806121ca620151806121c5856040015165ffffffffffff1642612c3b90919063ffffffff16565b612c98565b905060006121db6201518083612c3b565b9050612228620151806122226122078588602001516001600160681b0316612cb090919063ffffffff16565b875161221c906001600160681b031686612cb0565b90612d09565b90612d63565b949350505050565b600061223c8383612dca565b90508082141561224c5750610ca7565b6001600160a01b0383166000908152600660209081526040808320815192830190915254815261228791600391869185908790612149612e25565b6001600160a01b0383166000908152600a60209081526040918290208251918201909252905481526122cb9060079085908486670de0b6b3a7640000612911612e25565b6001600160a01b0383166000908152600e602090815260409182902082519182019092529054815261230890600b9085908486603c61238c612e25565b6001600160a01b03831660009081526012602090815260409182902082519182019092529054815261234c90600f908590848667016345785d8a00006123df612e25565b6001600160a01b03831660009081526016602090815260408083208151928301909152548152612387916013918691859087906120c2612e25565b505050565b60408051848152831515602082015280820183905290516001600160a01b038616917f2d2d732aa884d37295a1b5995321d502ebc228d25e644eef0a435d4e5f245acd919081900360600190a250505050565b60408051848152831515602082015280820183905290516001600160a01b038616917ffa67c3ef5d30b2838a61d783cb71a076e17984d05840f2dfa1521135df49557b919081900360600190a250505050565b606061243d82612e48565b1561247c575060408051808201909152600381527f45544800000000000000000000000000000000000000000000000000000000006020820152610973565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b4100000000000000000000000000000000000000000000000000000000178152915181516000936060936001600160a01b03881693614e2093919290918291908083835b602083106125155780518252601f1990920191602091820191016124f6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686fa925050503d8060008114612576576040519150601f19603f3d011682016040523d82523d6000602084013e61257b565b606091505b5091509150816126835760408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff76f8d7800000000000000000000000000000000000000000000000000000000178152915181516001600160a01b03881693614e209392918291908083835b602083106126165780518252601f1990920191602091820191016125f7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303818686fa925050503d8060008114612677576040519150601f19603f3d011682016040523d82523d6000602084013e61267c565b606091505b5090925090505b81801561269257506060815110155b156127b1576000808280602001905160408110156126af57600080fd5b5080516020918201519093509150821480156126cb5750600081115b80156126d957506101008111155b156127ae578280602001905160208110156126f357600080fd5b810190808051604051939291908464010000000082111561271357600080fd5b90830190602082018581111561272857600080fd5b825164010000000081118282018810171561274257600080fd5b82525081516020918201929091019080838360005b8381101561276f578181015183820152602001612757565b50505050905090810190601f16801561279c5780820380516001836020036101000a031916815260200191505b50604052505050945050505050610973565b50505b8180156127bf575080516020145b156129045760005b81518110801561280d5750602060f81b8282815181106127e357fe5b01602001517fff000000000000000000000000000000000000000000000000000000000000001610155b801561284f5750607e60f81b82828151811061282557fe5b01602001517fff000000000000000000000000000000000000000000000000000000000000001611155b1561285c576001016127c7565b80156129025760608167ffffffffffffffff8111801561287b57600080fd5b506040519080825280601f01601f1916602001820160405280156128a6576020820181803683370190505b50905060005b828110156128f6578381815181106128c057fe5b602001015160f81c60f81b8282815181106128d757fe5b60200101906001600160f81b031916908160001a9053506001016128ac565b50935061097392505050565b505b61222884612e55565b3390565b60408051848152831515602082015280820183905290516001600160a01b038616917f214419d1bacc9564ca0fcf6552dad3ec0aa54c97de900de89dc202e6bbd9198a919081900360600190a250505050565b61296c61146a565b156129be576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a1561290d565b604080516001600160a01b039092168252519081900360200190a1565b60018801546002890154819080612a488a612e8b565b612a7957612a6a612a63612a5c8c89612087565b8a90612cb0565b8490612c3b565b9250612a768189612c3b565b90505b612a8289612e8b565b612ab357612aa4612a9d612a968b89612087565b8990612cb0565b8490612d09565b9250612ab08188612d09565b90505b838314612ac25760018c018390555b818114612ad15760028c018190555b60008115612ae857612ae38483612d63565b612aea565b865b9050612af46130b5565b50604080516060810182528e546001600160681b038082168352600160681b82041660208301819052600160d01b90910465ffffffffffff1692820192909252908214612bdc578d612b4d612b488361219c565b612029565b612b5684612029565b612b5f42612e90565b835479ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b65ffffffffffff9290921691909102177fffffffffffff00000000000000000000000000ffffffffffffffffffffffffff16600160681b6001600160681b0392831602176cffffffffffffffffffffffffff191691161790555b50612be99050898b612eed565b612c0c576001600160a01b038b16600090815260038d0160205260409020895190555b612c2d8b612c1a8b89612087565b612c238c612e8b565b8a8963ffffffff16565b505050505050505050505050565b600082821115612c92576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000818310612ca75781612ca9565b825b9392505050565b600082612cbf57506000611779565b82820282848281612ccc57fe5b0414612ca95760405162461bcd60e51b81526004018080602001828103825260218152602001806130fc6021913960400191505060405180910390fd5b600082820183811015612ca9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000808211612db9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612dc257fe5b049392505050565b6001600160a01b038216600090815260016020526040902054818114611779576001600160a01b038316600090815260016020526040812083905554612e1c908290612e169085612d09565b90612c3b565b60005592915050565b6121258787878615612e375788612e3f565b612e3f61212e565b88888888612a32565b6001600160a01b03161590565b60606109708260405160200180826001600160a01b031660601b8152601401915050604051602081830303815290604052612ef4565b511590565b600066010000000000008210612083576040805162461bcd60e51b815260206004820152601d60248201527f76616c756520646f6573206e6f742066697420696e2034382062697473000000604482015290519081900360640190fd5b5190511490565b606080825160020260020167ffffffffffffffff81118015612f1557600080fd5b506040519080825280601f01601f191660200182016040528015612f40576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612f7157fe5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612fb657fe5b60200101906001600160f81b031916908160001a905350600260005b84518110156130995760006004868381518110612feb57fe5b602001015160f81c60f81b60f81c60ff16901c60ff169050600086838151811061301157fe5b60209101015160f81c600f169050600a8204602702826030010160f81b85858060010196508151811061304057fe5b60200101906001600160f81b031916908160001a905350600a8104602702816030010160f81b85858060010196508151811061307857fe5b60200101906001600160f81b031916908160001a9053505050600101612fd2565b50909392505050565b6040518060200160405280600081525090565b60408051606081018252600080825260208201819052918101919091529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220d3e1b132547ab019a0238edc39452ed745f5ee4f274f23e4914ce441a115e35a64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10226,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10230,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1668,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5138,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_defaultFee",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)8227_storage"
      },
      {
        "astId": 5140,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_defaultSlippageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Data)8227_storage"
      },
      {
        "astId": 5142,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_defaultDecayPeriod",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Data)8227_storage"
      },
      {
        "astId": 5144,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_referralShare",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Data)8227_storage"
      },
      {
        "astId": 5146,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_governanceShare",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(Data)8227_storage"
      },
      {
        "astId": 5149,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "governanceWallet",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 5152,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "feeCollector",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 5157,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "isFeeCollector",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3619,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_contract(Mooniswap)3550)dyn_storage"
      },
      {
        "astId": 3624,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_contract(Mooniswap)3550,t_bool)"
      },
      {
        "astId": 3630,
        "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
        "label": "_pools",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)3550))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Mooniswap)3550)dyn_storage": {
        "base": "t_contract(Mooniswap)3550",
        "encoding": "dynamic_array",
        "label": "contract Mooniswap[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1118": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Mooniswap)3550": {
        "encoding": "inplace",
        "label": "contract Mooniswap",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Data)9733_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vote.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)9733_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)3550)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => contract Mooniswap)",
        "numberOfBytes": "32",
        "value": "t_contract(Mooniswap)3550"
      },
      "t_mapping(t_contract(IERC20)1118,t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)3550))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1118",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => contract Mooniswap))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1118,t_contract(Mooniswap)3550)"
      },
      "t_mapping(t_contract(Mooniswap)3550,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(Mooniswap)3550",
        "label": "mapping(contract Mooniswap => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Data)8227_storage": {
        "encoding": "inplace",
        "label": "struct ExplicitLiquidVoting.Data",
        "members": [
          {
            "astId": 8218,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)9677_storage"
          },
          {
            "astId": 8220,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "_weightedSum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8222,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "_votedSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8226,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Data)9733_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Data)9677_storage": {
        "encoding": "inplace",
        "label": "struct VirtualVote.Data",
        "members": [
          {
            "astId": 9672,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "oldResult",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 9674,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "result",
            "offset": 13,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 9676,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "time",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)9733_storage": {
        "encoding": "inplace",
        "label": "struct Vote.Data",
        "members": [
          {
            "astId": 9732,
            "contract": "contracts/MooniswapFactory.sol:MooniswapFactory",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}